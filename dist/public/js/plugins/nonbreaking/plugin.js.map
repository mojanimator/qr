{"version":3,"sources":["../../../../../public/js/plugins/nonbreaking/plugin.js"],"names":["global","tinymce","util","Tools","resolve","getKeyboardSpaces","editor","spaces","getParam","wrapNbsps","Settings","stringRepeat","string","repeats","str","index","isVisualCharsEnabled","plugins","visualchars","isEnabled","insertNbsp","times","classes","nbspSpan","shouldWrap","html","undoManager","transact","insertContent","Actions","register","addCommand","Commands","global$1","setup","on","e","keyCode","TAB","isDefaultPrevented","shiftKey","preventDefault","stopImmediatePropagation","Keyboard","register$1","ui","registry","addButton","icon","tooltip","onAction","execCommand","addMenuItem","text","Buttons","Plugin","add"],"mappings":"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","file":"plugin.js","sourcesContent":["/**\n * Copyright (c) Tiny Technologies, Inc. All rights reserved.\n * Licensed under the LGPL or a commercial license.\n * For LGPL see License.txt in the project root for license information.\n * For commercial licenses see https://www.tiny.cloud/\n *\n * Version: 5.1.0 (2019-10-17)\n */\n(function () {\n    'use strict';\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var getKeyboardSpaces = function (editor) {\n      var spaces = editor.getParam('nonbreaking_force_tab', 0);\n      if (typeof spaces === 'boolean') {\n        return spaces === true ? 3 : 0;\n      } else {\n        return spaces;\n      }\n    };\n    var wrapNbsps = function (editor) {\n      return editor.getParam('nonbreaking_wrap', true, 'boolean');\n    };\n    var Settings = {\n      getKeyboardSpaces: getKeyboardSpaces,\n      wrapNbsps: wrapNbsps\n    };\n\n    var stringRepeat = function (string, repeats) {\n      var str = '';\n      for (var index = 0; index < repeats; index++) {\n        str += string;\n      }\n      return str;\n    };\n    var isVisualCharsEnabled = function (editor) {\n      return editor.plugins.visualchars ? editor.plugins.visualchars.isEnabled() : false;\n    };\n    var insertNbsp = function (editor, times) {\n      var classes = function () {\n        return isVisualCharsEnabled(editor) ? 'mce-nbsp-wrap mce-nbsp' : 'mce-nbsp-wrap';\n      };\n      var nbspSpan = function () {\n        return '<span class=\"' + classes() + '\" contenteditable=\"false\">' + stringRepeat('&nbsp;', times) + '</span>';\n      };\n      var shouldWrap = Settings.wrapNbsps(editor);\n      var html = shouldWrap || editor.plugins.visualchars ? nbspSpan() : stringRepeat('&nbsp;', times);\n      editor.undoManager.transact(function () {\n        return editor.insertContent(html);\n      });\n    };\n    var Actions = { insertNbsp: insertNbsp };\n\n    var register = function (editor) {\n      editor.addCommand('mceNonBreaking', function () {\n        Actions.insertNbsp(editor, 1);\n      });\n    };\n    var Commands = { register: register };\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.util.VK');\n\n    var setup = function (editor) {\n      var spaces = Settings.getKeyboardSpaces(editor);\n      if (spaces > 0) {\n        editor.on('keydown', function (e) {\n          if (e.keyCode === global$1.TAB && !e.isDefaultPrevented()) {\n            if (e.shiftKey) {\n              return;\n            }\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            Actions.insertNbsp(editor, spaces);\n          }\n        });\n      }\n    };\n    var Keyboard = { setup: setup };\n\n    var register$1 = function (editor) {\n      editor.ui.registry.addButton('nonbreaking', {\n        icon: 'non-breaking',\n        tooltip: 'Nonbreaking space',\n        onAction: function () {\n          return editor.execCommand('mceNonBreaking');\n        }\n      });\n      editor.ui.registry.addMenuItem('nonbreaking', {\n        icon: 'non-breaking',\n        text: 'Nonbreaking space',\n        onAction: function () {\n          return editor.execCommand('mceNonBreaking');\n        }\n      });\n    };\n    var Buttons = { register: register$1 };\n\n    function Plugin () {\n      global.add('nonbreaking', function (editor) {\n        Commands.register(editor);\n        Buttons.register(editor);\n        Keyboard.setup(editor);\n      });\n    }\n\n    Plugin();\n\n}());\n"]}