{"version":3,"sources":["../../../../public/js/awesomeqr/gif.worker.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","module","NeuQuant","LZWEncoder","ByteArray","page","pages","newPage","pageSize","charMap","String","fromCharCode","prototype","Uint8Array","cursor","getData","rv","p","writeByte","val","writeUTFBytes","string","charCodeAt","writeBytes","array","offset","GIFEncoder","width","height","transparent","transIndex","repeat","delay","image","pixels","indexedPixels","colorDepth","colorTab","neuQuant","usedEntry","Array","palSize","dispose","firstFrame","sample","dither","globalPalette","out","setDelay","milliseconds","Math","round","setFrameRate","fps","setDispose","disposalCode","setRepeat","setTransparent","color","addFrame","imageData","slice","getImagePixels","analyzePixels","writeLSD","writePalette","writeNetscapeExt","writeGraphicCtrlExt","writeImageDesc","writePixels","finish","setQuality","quality","setDither","setGlobalPalette","palette","getGlobalPalette","writeHeader","buildColormap","getColormap","ditherPixels","replace","match","indexPixels","findClosest","imgq","nPix","k","j","index","findClosestRGB","kernel","serpentine","kernels","FalseFloydSteinberg","FloydSteinberg","Stucki","Atkinson","ds","data","direction","y","x","xend","idx","r1","g1","b1","r2","g2","b2","er","eg","eb","end","x1","y1","d","max","min","c","used","g","b","lookupRGB","minpos","dmin","len","dr","dg","db","w","h","srcPos","count","transp","disp","writeShort","pValue","enc","encode","stream","EOF","BITS","HSIZE","masks","initCodeSize","accum","htab","Int32Array","codetab","cur_accum","cur_bits","a_count","free_ent","maxcode","clear_flg","g_init_bits","ClearCode","EOFCode","char_out","outs","flush_char","cl_block","cl_hash","output","hsize","compress","init_bits","fcode","ent","hsize_reg","hshift","n_bits","MAXCODE","nextPixel","outer_loop","remaining","curPixel","pix","ncycles","netsize","maxnetpos","netbiasshift","intbiasshift","intbias","gammashift","gamma","betashift","beta","betagamma","initrad","radiusbiasshift","radiusbias","initradius","radiusdec","alphabiasshift","initalpha","alphadec","radbiasshift","radbias","alpharadbshift","alpharadbias","prime1","prime2","prime3","prime4","minpicturebytes","samplefac","network","netindex","bias","freq","radpower","init","v","Float64Array","unbiasnet","altersingle","alpha","alterneigh","radius","lo","abs","hi","m","contest","bestd","bestbiasd","bestpos","bestbiaspos","dist","biasdist","betafreq","inxbuild","q","smallpos","smallval","previouscol","startpos","inxsearch","best","learn","lengthcount","samplepixels","delta","rad","step","map","renderFrame","frame","encoder","transfer","last","constructor","canTransfer","ref","results","push","buffer","self","postMessage","onmessage","event"],"mappings":";;AAAA;AACA,CAAC,SAASA,CAAT,CAAWC,CAAX,EAAcC,CAAd,EAAiBC,CAAjB,EAAoB;AACjB,aAASC,CAAT,CAAWC,CAAX,EAAcC,CAAd,EAAiB;AACb,YAAI,CAACJ,EAAEG,CAAF,CAAL,EAAW;AACP,gBAAI,CAACJ,EAAEI,CAAF,CAAL,EAAW;AACP,oBAAIE,IAAI,OAAOC,OAAP,IAAkB,UAAlB,IAAgCA,OAAxC;AACA,oBAAI,CAACF,CAAD,IAAMC,CAAV,EAAY,OAAOA,EAAEF,CAAF,EAAK,CAAC,CAAN,CAAP;AACZ,oBAAII,CAAJ,EAAM,OAAOA,EAAEJ,CAAF,EAAK,CAAC,CAAN,CAAP;AACN,oBAAIK,IAAI,IAAIC,KAAJ,CAAU,yBAAyBN,CAAzB,GAA6B,GAAvC,CAAR;AACA,sBAAMK,EAAEE,IAAF,GAAS,kBAAT,EAA6BF,CAAnC;AACH;AACD,gBAAIG,IAAIX,EAAEG,CAAF,IAAO,EAACS,SAAS,EAAV,EAAf;AACAb,cAAEI,CAAF,EAAK,CAAL,EAAQU,IAAR,CAAaF,EAAEC,OAAf,EAAwB,UAAUd,CAAV,EAAa;AACjC,oBAAIE,IAAID,EAAEI,CAAF,EAAK,CAAL,EAAQL,CAAR,CAAR;AACA,uBAAOI,EAAEF,IAAIA,CAAJ,GAAQF,CAAV,CAAP;AACH,aAHD,EAGGa,CAHH,EAGMA,EAAEC,OAHR,EAGiBd,CAHjB,EAGoBC,CAHpB,EAGuBC,CAHvB,EAG0BC,CAH1B;AAIH;AACD,eAAOD,EAAEG,CAAF,EAAKS,OAAZ;AACH;;AAED,QAAIL,IAAI,OAAOD,OAAP,IAAkB,UAAlB,IAAgCA,OAAxC;AACA,SAAK,IAAIH,IAAI,CAAb,EAAgBA,IAAIF,EAAEa,MAAtB,EAA8BX,GAA9B;AAAkCD,UAAED,EAAEE,CAAF,CAAF;AAAlC,KACA,OAAOD,CAAP;AACH,CAtBD,EAsBG;AACC,OAAG,CAAC,UAAUI,OAAV,EAAmBS,MAAnB,EAA2BH,OAA3B,EAAoC;AACpC,YAAII,WAAWV,QAAQ,oBAAR,CAAf;AACA,YAAIW,aAAaX,QAAQ,iBAAR,CAAjB;;AAEA,iBAASY,SAAT,GAAqB;AACjB,iBAAKC,IAAL,GAAY,CAAC,CAAb;AACA,iBAAKC,KAAL,GAAa,EAAb;AACA,iBAAKC,OAAL;AACH;;AAEDH,kBAAUI,QAAV,GAAqB,IAArB;AACAJ,kBAAUK,OAAV,GAAoB,EAApB;AACA,aAAK,IAAIhB,IAAI,CAAb,EAAgBA,IAAI,GAApB,EAAyBA,GAAzB;AAA6BW,sBAAUK,OAAV,CAAkBhB,CAAlB,IAAuBiB,OAAOC,YAAP,CAAoBlB,CAApB,CAAvB;AAA7B,SACAW,UAAUQ,SAAV,CAAoBL,OAApB,GAA8B,YAAY;AACtC,iBAAKD,KAAL,CAAW,EAAE,KAAKD,IAAlB,IAA0B,IAAIQ,UAAJ,CAAeT,UAAUI,QAAzB,CAA1B;AACA,iBAAKM,MAAL,GAAc,CAAd;AACH,SAHD;AAIAV,kBAAUQ,SAAV,CAAoBG,OAApB,GAA8B,YAAY;AACtC,gBAAIC,KAAK,EAAT;AACA,iBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,KAAKX,KAAL,CAAWN,MAA/B,EAAuCiB,GAAvC,EAA4C;AACxC,qBAAK,IAAIxB,IAAI,CAAb,EAAgBA,IAAIW,UAAUI,QAA9B,EAAwCf,GAAxC,EAA6C;AACzCuB,0BAAMZ,UAAUK,OAAV,CAAkB,KAAKH,KAAL,CAAWW,CAAX,EAAcxB,CAAd,CAAlB,CAAN;AACH;AACJ;AACD,mBAAOuB,EAAP;AACH,SARD;AASAZ,kBAAUQ,SAAV,CAAoBM,SAApB,GAAgC,UAAUC,GAAV,EAAe;AAC3C,gBAAI,KAAKL,MAAL,IAAeV,UAAUI,QAA7B,EAAuC,KAAKD,OAAL;AACvC,iBAAKD,KAAL,CAAW,KAAKD,IAAhB,EAAsB,KAAKS,MAAL,EAAtB,IAAuCK,GAAvC;AACH,SAHD;AAIAf,kBAAUQ,SAAV,CAAoBQ,aAApB,GAAoC,UAAUC,MAAV,EAAkB;AAClD,iBAAK,IAAIxB,IAAIwB,OAAOrB,MAAf,EAAuBP,IAAI,CAAhC,EAAmCA,IAAII,CAAvC,EAA0CJ,GAA1C;AAA8C,qBAAKyB,SAAL,CAAeG,OAAOC,UAAP,CAAkB7B,CAAlB,CAAf;AAA9C;AACH,SAFD;AAGAW,kBAAUQ,SAAV,CAAoBW,UAApB,GAAiC,UAAUC,KAAV,EAAiBC,MAAjB,EAAyBzB,MAAzB,EAAiC;AAC9D,iBAAK,IAAIH,IAAIG,UAAUwB,MAAMxB,MAAxB,EAAgCP,IAAIgC,UAAU,CAAnD,EAAsDhC,IAAII,CAA1D,EAA6DJ,GAA7D;AAAiE,qBAAKyB,SAAL,CAAeM,MAAM/B,CAAN,CAAf;AAAjE;AACH,SAFD;AAGA,iBAASiC,UAAT,CAAoBC,KAApB,EAA2BC,MAA3B,EAAmC;AAC/B,iBAAKD,KAAL,GAAa,CAAC,CAACA,KAAf;AACA,iBAAKC,MAAL,GAAc,CAAC,CAACA,MAAhB;AACA,iBAAKC,WAAL,GAAmB,IAAnB;AACA,iBAAKC,UAAL,GAAkB,CAAlB;AACA,iBAAKC,MAAL,GAAc,CAAC,CAAf;AACA,iBAAKC,KAAL,GAAa,CAAb;AACA,iBAAKC,KAAL,GAAa,IAAb;AACA,iBAAKC,MAAL,GAAc,IAAd;AACA,iBAAKC,aAAL,GAAqB,IAArB;AACA,iBAAKC,UAAL,GAAkB,IAAlB;AACA,iBAAKC,QAAL,GAAgB,IAAhB;AACA,iBAAKC,QAAL,GAAgB,IAAhB;AACA,iBAAKC,SAAL,GAAiB,IAAIC,KAAJ,EAAjB;AACA,iBAAKC,OAAL,GAAe,CAAf;AACA,iBAAKC,OAAL,GAAe,CAAC,CAAhB;AACA,iBAAKC,UAAL,GAAkB,IAAlB;AACA,iBAAKC,MAAL,GAAc,EAAd;AACA,iBAAKC,MAAL,GAAc,KAAd;AACA,iBAAKC,aAAL,GAAqB,KAArB;AACA,iBAAKC,GAAL,GAAW,IAAI3C,SAAJ,EAAX;AACH;;AAEDsB,mBAAWd,SAAX,CAAqBoC,QAArB,GAAgC,UAAUC,YAAV,EAAwB;AACpD,iBAAKjB,KAAL,GAAakB,KAAKC,KAAL,CAAWF,eAAe,EAA1B,CAAb;AACH,SAFD;AAGAvB,mBAAWd,SAAX,CAAqBwC,YAArB,GAAoC,UAAUC,GAAV,EAAe;AAC/C,iBAAKrB,KAAL,GAAakB,KAAKC,KAAL,CAAW,MAAME,GAAjB,CAAb;AACH,SAFD;AAGA3B,mBAAWd,SAAX,CAAqB0C,UAArB,GAAkC,UAAUC,YAAV,EAAwB;AACtD,gBAAIA,gBAAgB,CAApB,EAAuB,KAAKb,OAAL,GAAea,YAAf;AAC1B,SAFD;AAGA7B,mBAAWd,SAAX,CAAqB4C,SAArB,GAAiC,UAAUzB,MAAV,EAAkB;AAC/C,iBAAKA,MAAL,GAAcA,MAAd;AACH,SAFD;AAGAL,mBAAWd,SAAX,CAAqB6C,cAArB,GAAsC,UAAUC,KAAV,EAAiB;AACnD,iBAAK7B,WAAL,GAAmB6B,KAAnB;AACH,SAFD;AAGAhC,mBAAWd,SAAX,CAAqB+C,QAArB,GAAgC,UAAUC,SAAV,EAAqB;AACjD,iBAAK3B,KAAL,GAAa2B,SAAb;AACA,iBAAKvB,QAAL,GAAgB,KAAKS,aAAL,IAAsB,KAAKA,aAAL,CAAmBe,KAAzC,GAAiD,KAAKf,aAAtD,GAAsE,IAAtF;AACA,iBAAKgB,cAAL;AACA,iBAAKC,aAAL;AACA,gBAAI,KAAKjB,aAAL,KAAuB,IAA3B,EAAiC,KAAKA,aAAL,GAAqB,KAAKT,QAA1B;AACjC,gBAAI,KAAKM,UAAT,EAAqB;AACjB,qBAAKqB,QAAL;AACA,qBAAKC,YAAL;AACA,oBAAI,KAAKlC,MAAL,IAAe,CAAnB,EAAsB;AAClB,yBAAKmC,gBAAL;AACH;AACJ;AACD,iBAAKC,mBAAL;AACA,iBAAKC,cAAL;AACA,gBAAI,CAAC,KAAKzB,UAAN,IAAoB,CAAC,KAAKG,aAA9B,EAA6C,KAAKmB,YAAL;AAC7C,iBAAKI,WAAL;AACA,iBAAK1B,UAAL,GAAkB,KAAlB;AACH,SAlBD;AAmBAjB,mBAAWd,SAAX,CAAqB0D,MAArB,GAA8B,YAAY;AACtC,iBAAKvB,GAAL,CAAS7B,SAAT,CAAmB,EAAnB;AACH,SAFD;AAGAQ,mBAAWd,SAAX,CAAqB2D,UAArB,GAAkC,UAAUC,OAAV,EAAmB;AACjD,gBAAIA,UAAU,CAAd,EAAiBA,UAAU,CAAV;AACjB,iBAAK5B,MAAL,GAAc4B,OAAd;AACH,SAHD;AAIA9C,mBAAWd,SAAX,CAAqB6D,SAArB,GAAiC,UAAU5B,MAAV,EAAkB;AAC/C,gBAAIA,WAAW,IAAf,EAAqBA,SAAS,gBAAT;AACrB,iBAAKA,MAAL,GAAcA,MAAd;AACH,SAHD;AAIAnB,mBAAWd,SAAX,CAAqB8D,gBAArB,GAAwC,UAAUC,OAAV,EAAmB;AACvD,iBAAK7B,aAAL,GAAqB6B,OAArB;AACH,SAFD;AAGAjD,mBAAWd,SAAX,CAAqBgE,gBAArB,GAAwC,YAAY;AAChD,mBAAO,KAAK9B,aAAL,IAAsB,KAAKA,aAAL,CAAmBe,KAAzC,IAAkD,KAAKf,aAAL,CAAmBe,KAAnB,CAAyB,CAAzB,CAAlD,IAAiF,KAAKf,aAA7F;AACH,SAFD;AAGApB,mBAAWd,SAAX,CAAqBiE,WAArB,GAAmC,YAAY;AAC3C,iBAAK9B,GAAL,CAAS3B,aAAT,CAAuB,QAAvB;AACH,SAFD;AAGAM,mBAAWd,SAAX,CAAqBmD,aAArB,GAAqC,YAAY;AAC7C,gBAAI,CAAC,KAAK1B,QAAV,EAAoB;AAChB,qBAAKC,QAAL,GAAgB,IAAIpC,QAAJ,CAAa,KAAKgC,MAAlB,EAA0B,KAAKU,MAA/B,CAAhB;AACA,qBAAKN,QAAL,CAAcwC,aAAd;AACA,qBAAKzC,QAAL,GAAgB,KAAKC,QAAL,CAAcyC,WAAd,EAAhB;AACH;AACD,gBAAI,KAAKlC,MAAT,EAAiB;AACb,qBAAKmC,YAAL,CAAkB,KAAKnC,MAAL,CAAYoC,OAAZ,CAAoB,aAApB,EAAmC,EAAnC,CAAlB,EAA0D,KAAKpC,MAAL,CAAYqC,KAAZ,CAAkB,aAAlB,MAAqC,IAA/F;AACH,aAFD,MAEO;AACH,qBAAKC,WAAL;AACH;AACD,iBAAKjD,MAAL,GAAc,IAAd;AACA,iBAAKE,UAAL,GAAkB,CAAlB;AACA,iBAAKK,OAAL,GAAe,CAAf;AACA,gBAAI,KAAKZ,WAAL,KAAqB,IAAzB,EAA+B;AAC3B,qBAAKC,UAAL,GAAkB,KAAKsD,WAAL,CAAiB,KAAKvD,WAAtB,EAAmC,IAAnC,CAAlB;AACH;AACJ,SAjBD;AAkBAH,mBAAWd,SAAX,CAAqBuE,WAArB,GAAmC,UAAUE,IAAV,EAAgB;AAC/C,gBAAIC,OAAO,KAAKpD,MAAL,CAAYlC,MAAZ,GAAqB,CAAhC;AACA,iBAAKmC,aAAL,GAAqB,IAAItB,UAAJ,CAAeyE,IAAf,CAArB;AACA,gBAAIC,IAAI,CAAR;AACA,iBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,IAApB,EAA0BE,GAA1B,EAA+B;AAC3B,oBAAIC,QAAQ,KAAKC,cAAL,CAAoB,KAAKxD,MAAL,CAAYqD,GAAZ,IAAmB,GAAvC,EAA4C,KAAKrD,MAAL,CAAYqD,GAAZ,IAAmB,GAA/D,EAAoE,KAAKrD,MAAL,CAAYqD,GAAZ,IAAmB,GAAvF,CAAZ;AACA,qBAAKhD,SAAL,CAAekD,KAAf,IAAwB,IAAxB;AACA,qBAAKtD,aAAL,CAAmBqD,CAAnB,IAAwBC,KAAxB;AACH;AACJ,SATD;AAUA/D,mBAAWd,SAAX,CAAqBoE,YAArB,GAAoC,UAAUW,MAAV,EAAkBC,UAAlB,EAA8B;AAC9D,gBAAIC,UAAU;AACVC,qCAAqB,CAAC,CAAC,IAAI,CAAL,EAAQ,CAAR,EAAW,CAAX,CAAD,EAAgB,CAAC,IAAI,CAAL,EAAQ,CAAR,EAAW,CAAX,CAAhB,EAA+B,CAAC,IAAI,CAAL,EAAQ,CAAR,EAAW,CAAX,CAA/B,CADX;AAEVC,gCAAgB,CAAC,CAAC,IAAI,EAAL,EAAS,CAAT,EAAY,CAAZ,CAAD,EAAiB,CAAC,IAAI,EAAL,EAAS,CAAC,CAAV,EAAa,CAAb,CAAjB,EAAkC,CAAC,IAAI,EAAL,EAAS,CAAT,EAAY,CAAZ,CAAlC,EAAkD,CAAC,IAAI,EAAL,EAAS,CAAT,EAAY,CAAZ,CAAlD,CAFN;AAGVC,wBAAQ,CAAC,CAAC,IAAI,EAAL,EAAS,CAAT,EAAY,CAAZ,CAAD,EAAiB,CAAC,IAAI,EAAL,EAAS,CAAT,EAAY,CAAZ,CAAjB,EAAiC,CAAC,IAAI,EAAL,EAAS,CAAC,CAAV,EAAa,CAAb,CAAjC,EAAkD,CAAC,IAAI,EAAL,EAAS,CAAC,CAAV,EAAa,CAAb,CAAlD,EAAmE,CAAC,IAAI,EAAL,EAAS,CAAT,EAAY,CAAZ,CAAnE,EAAmF,CAAC,IAAI,EAAL,EAAS,CAAT,EAAY,CAAZ,CAAnF,EAAmG,CAAC,IAAI,EAAL,EAAS,CAAT,EAAY,CAAZ,CAAnG,EAAmH,CAAC,IAAI,EAAL,EAAS,CAAC,CAAV,EAAa,CAAb,CAAnH,EAAoI,CAAC,IAAI,EAAL,EAAS,CAAC,CAAV,EAAa,CAAb,CAApI,EAAqJ,CAAC,IAAI,EAAL,EAAS,CAAT,EAAY,CAAZ,CAArJ,EAAqK,CAAC,IAAI,EAAL,EAAS,CAAT,EAAY,CAAZ,CAArK,EAAqL,CAAC,IAAI,EAAL,EAAS,CAAT,EAAY,CAAZ,CAArL,CAHE;AAIVC,0BAAU,CAAC,CAAC,IAAI,CAAL,EAAQ,CAAR,EAAW,CAAX,CAAD,EAAgB,CAAC,IAAI,CAAL,EAAQ,CAAR,EAAW,CAAX,CAAhB,EAA+B,CAAC,IAAI,CAAL,EAAQ,CAAC,CAAT,EAAY,CAAZ,CAA/B,EAA+C,CAAC,IAAI,CAAL,EAAQ,CAAR,EAAW,CAAX,CAA/C,EAA8D,CAAC,IAAI,CAAL,EAAQ,CAAR,EAAW,CAAX,CAA9D,EAA6E,CAAC,IAAI,CAAL,EAAQ,CAAR,EAAW,CAAX,CAA7E;AAJA,aAAd;AAMA,gBAAI,CAACN,MAAD,IAAW,CAACE,QAAQF,MAAR,CAAhB,EAAiC;AAC7B,sBAAK,+BAA+BA,MAApC;AACH;AACD,gBAAIO,KAAKL,QAAQF,MAAR,CAAT;AACA,gBAAIF,QAAQ,CAAZ;AAAA,gBAAe7D,SAAS,KAAKA,MAA7B;AAAA,gBAAqCD,QAAQ,KAAKA,KAAlD;AAAA,gBAAyDwE,OAAO,KAAKjE,MAArE;AACA,gBAAIkE,YAAYR,aAAa,CAAC,CAAd,GAAkB,CAAlC;AACA,iBAAKzD,aAAL,GAAqB,IAAItB,UAAJ,CAAe,KAAKqB,MAAL,CAAYlC,MAAZ,GAAqB,CAApC,CAArB;AACA,iBAAK,IAAIqG,IAAI,CAAb,EAAgBA,IAAIzE,MAApB,EAA4ByE,GAA5B,EAAiC;AAC7B,oBAAIT,UAAJ,EAAgBQ,YAAYA,YAAY,CAAC,CAAzB;AAChB,qBAAK,IAAIE,IAAIF,aAAa,CAAb,GAAiB,CAAjB,GAAqBzE,QAAQ,CAArC,EAAwC4E,OAAOH,aAAa,CAAb,GAAiBzE,KAAjB,GAAyB,CAA7E,EAAgF2E,MAAMC,IAAtF,EAA4FD,KAAKF,SAAjG,EAA4G;AACxGX,4BAAQY,IAAI1E,KAAJ,GAAY2E,CAApB;AACA,wBAAIE,MAAMf,QAAQ,CAAlB;AACA,wBAAIgB,KAAKN,KAAKK,GAAL,CAAT;AACA,wBAAIE,KAAKP,KAAKK,MAAM,CAAX,CAAT;AACA,wBAAIG,KAAKR,KAAKK,MAAM,CAAX,CAAT;AACAA,0BAAM,KAAKd,cAAL,CAAoBe,EAApB,EAAwBC,EAAxB,EAA4BC,EAA5B,CAAN;AACA,yBAAKpE,SAAL,CAAeiE,GAAf,IAAsB,IAAtB;AACA,yBAAKrE,aAAL,CAAmBsD,KAAnB,IAA4Be,GAA5B;AACAA,2BAAO,CAAP;AACA,wBAAII,KAAK,KAAKvE,QAAL,CAAcmE,GAAd,CAAT;AACA,wBAAIK,KAAK,KAAKxE,QAAL,CAAcmE,MAAM,CAApB,CAAT;AACA,wBAAIM,KAAK,KAAKzE,QAAL,CAAcmE,MAAM,CAApB,CAAT;AACA,wBAAIO,KAAKN,KAAKG,EAAd;AACA,wBAAII,KAAKN,KAAKG,EAAd;AACA,wBAAII,KAAKN,KAAKG,EAAd;AACA,yBAAK,IAAIrH,IAAI2G,aAAa,CAAb,GAAiB,CAAjB,GAAqBF,GAAGlG,MAAH,GAAY,CAAzC,EAA4CkH,MAAMd,aAAa,CAAb,GAAiBF,GAAGlG,MAApB,GAA6B,CAApF,EAAuFP,MAAMyH,GAA7F,EAAkGzH,KAAK2G,SAAvG,EAAkH;AAC9G,4BAAIe,KAAKjB,GAAGzG,CAAH,EAAM,CAAN,CAAT;AACA,4BAAI2H,KAAKlB,GAAGzG,CAAH,EAAM,CAAN,CAAT;AACA,4BAAI0H,KAAKb,CAAL,IAAU,CAAV,IAAea,KAAKb,CAAL,GAAS3E,KAAxB,IAAiCyF,KAAKf,CAAL,IAAU,CAA3C,IAAgDe,KAAKf,CAAL,GAASzE,MAA7D,EAAqE;AACjE,gCAAIyF,IAAInB,GAAGzG,CAAH,EAAM,CAAN,CAAR;AACA+G,kCAAMf,QAAQ0B,EAAR,GAAaC,KAAKzF,KAAxB;AACA6E,mCAAO,CAAP;AACAL,iCAAKK,GAAL,IAAYtD,KAAKoE,GAAL,CAAS,CAAT,EAAYpE,KAAKqE,GAAL,CAAS,GAAT,EAAcpB,KAAKK,GAAL,IAAYO,KAAKM,CAA/B,CAAZ,CAAZ;AACAlB,iCAAKK,MAAM,CAAX,IAAgBtD,KAAKoE,GAAL,CAAS,CAAT,EAAYpE,KAAKqE,GAAL,CAAS,GAAT,EAAcpB,KAAKK,MAAM,CAAX,IAAgBQ,KAAKK,CAAnC,CAAZ,CAAhB;AACAlB,iCAAKK,MAAM,CAAX,IAAgBtD,KAAKoE,GAAL,CAAS,CAAT,EAAYpE,KAAKqE,GAAL,CAAS,GAAT,EAAcpB,KAAKK,MAAM,CAAX,IAAgBS,KAAKI,CAAnC,CAAZ,CAAhB;AACH;AACJ;AACJ;AACJ;AACJ,SA9CD;AA+CA3F,mBAAWd,SAAX,CAAqBwE,WAArB,GAAmC,UAAUoC,CAAV,EAAaC,IAAb,EAAmB;AAClD,mBAAO,KAAK/B,cAAL,CAAoB,CAAC8B,IAAI,QAAL,KAAkB,EAAtC,EAA0C,CAACA,IAAI,KAAL,KAAe,CAAzD,EAA4DA,IAAI,GAAhE,EAAqEC,IAArE,CAAP;AACH,SAFD;AAGA/F,mBAAWd,SAAX,CAAqB8E,cAArB,GAAsC,UAAUvG,CAAV,EAAauI,CAAb,EAAgBC,CAAhB,EAAmBF,IAAnB,EAAyB;AAC3D,gBAAI,KAAKpF,QAAL,KAAkB,IAAtB,EAA2B,OAAO,CAAC,CAAR;AAC3B,gBAAI,KAAKC,QAAL,IAAiB,CAACmF,IAAtB,EAA4B;AACxB,uBAAO,KAAKnF,QAAL,CAAcsF,SAAd,CAAwBzI,CAAxB,EAA2BuI,CAA3B,EAA8BC,CAA9B,CAAP;AACH;AACD,gBAAIH,IAAIG,IAAID,KAAK,CAAT,GAAavI,KAAK,EAA1B;AACA,gBAAI0I,SAAS,CAAb;AACA,gBAAIC,OAAO,MAAM,GAAN,GAAY,GAAvB;AACA,gBAAIC,MAAM,KAAK1F,QAAL,CAAcrC,MAAxB;AACA,iBAAK,IAAIP,IAAI,CAAR,EAAWgG,QAAQ,CAAxB,EAA2BhG,IAAIsI,GAA/B,EAAoCtC,OAApC,EAA6C;AACzC,oBAAIuC,KAAK7I,KAAK,KAAKkD,QAAL,CAAc5C,GAAd,IAAqB,GAA1B,CAAT;AACA,oBAAIwI,KAAKP,KAAK,KAAKrF,QAAL,CAAc5C,GAAd,IAAqB,GAA1B,CAAT;AACA,oBAAIyI,KAAKP,KAAK,KAAKtF,QAAL,CAAc5C,GAAd,IAAqB,GAA1B,CAAT;AACA,oBAAI4H,IAAIW,KAAKA,EAAL,GAAUC,KAAKA,EAAf,GAAoBC,KAAKA,EAAjC;AACA,oBAAI,CAAC,CAACT,IAAD,IAAS,KAAKlF,SAAL,CAAekD,KAAf,CAAV,KAAoC4B,IAAIS,IAA5C,EAAkD;AAC9CA,2BAAOT,CAAP;AACAQ,6BAASpC,KAAT;AACH;AACJ;AACD,mBAAOoC,MAAP;AACH,SApBD;AAqBAnG,mBAAWd,SAAX,CAAqBkD,cAArB,GAAsC,YAAY;AAC9C,gBAAIqE,IAAI,KAAKxG,KAAb;AACA,gBAAIyG,IAAI,KAAKxG,MAAb;AACA,iBAAKM,MAAL,GAAc,IAAIrB,UAAJ,CAAesH,IAAIC,CAAJ,GAAQ,CAAvB,CAAd;AACA,gBAAIjC,OAAO,KAAKlE,KAAhB;AACA,gBAAIoG,SAAS,CAAb;AACA,gBAAIC,QAAQ,CAAZ;AACA,iBAAK,IAAI7I,IAAI,CAAb,EAAgBA,IAAI2I,CAApB,EAAuB3I,GAAvB,EAA4B;AACxB,qBAAK,IAAI+F,IAAI,CAAb,EAAgBA,IAAI2C,CAApB,EAAuB3C,GAAvB,EAA4B;AACxB,yBAAKtD,MAAL,CAAYoG,OAAZ,IAAuBnC,KAAKkC,QAAL,CAAvB;AACA,yBAAKnG,MAAL,CAAYoG,OAAZ,IAAuBnC,KAAKkC,QAAL,CAAvB;AACA,yBAAKnG,MAAL,CAAYoG,OAAZ,IAAuBnC,KAAKkC,QAAL,CAAvB;AACAA;AACH;AACJ;AACJ,SAfD;AAgBA3G,mBAAWd,SAAX,CAAqBuD,mBAArB,GAA2C,YAAY;AACnD,iBAAKpB,GAAL,CAAS7B,SAAT,CAAmB,EAAnB;AACA,iBAAK6B,GAAL,CAAS7B,SAAT,CAAmB,GAAnB;AACA,iBAAK6B,GAAL,CAAS7B,SAAT,CAAmB,CAAnB;AACA,gBAAIqH,MAAJ,EAAYC,IAAZ;AACA,gBAAI,KAAK3G,WAAL,KAAqB,IAAzB,EAA+B;AAC3B0G,yBAAS,CAAT;AACAC,uBAAO,CAAP;AACH,aAHD,MAGO;AACHD,yBAAS,CAAT;AACAC,uBAAO,CAAP;AACH;AACD,gBAAI,KAAK9F,OAAL,IAAgB,CAApB,EAAuB;AACnB8F,uBAAO9F,UAAU,CAAjB;AACH;AACD8F,qBAAS,CAAT;AACA,iBAAKzF,GAAL,CAAS7B,SAAT,CAAmB,IAAIsH,IAAJ,GAAW,CAAX,GAAeD,MAAlC;AACA,iBAAKE,UAAL,CAAgB,KAAKzG,KAArB;AACA,iBAAKe,GAAL,CAAS7B,SAAT,CAAmB,KAAKY,UAAxB;AACA,iBAAKiB,GAAL,CAAS7B,SAAT,CAAmB,CAAnB;AACH,SApBD;AAqBAQ,mBAAWd,SAAX,CAAqBwD,cAArB,GAAsC,YAAY;AAC9C,iBAAKrB,GAAL,CAAS7B,SAAT,CAAmB,EAAnB;AACA,iBAAKuH,UAAL,CAAgB,CAAhB;AACA,iBAAKA,UAAL,CAAgB,CAAhB;AACA,iBAAKA,UAAL,CAAgB,KAAK9G,KAArB;AACA,iBAAK8G,UAAL,CAAgB,KAAK7G,MAArB;AACA,gBAAI,KAAKe,UAAL,IAAmB,KAAKG,aAA5B,EAA2C;AACvC,qBAAKC,GAAL,CAAS7B,SAAT,CAAmB,CAAnB;AACH,aAFD,MAEO;AACH,qBAAK6B,GAAL,CAAS7B,SAAT,CAAmB,MAAM,CAAN,GAAU,CAAV,GAAc,CAAd,GAAkB,KAAKuB,OAA1C;AACH;AACJ,SAXD;AAYAf,mBAAWd,SAAX,CAAqBoD,QAArB,GAAgC,YAAY;AACxC,iBAAKyE,UAAL,CAAgB,KAAK9G,KAArB;AACA,iBAAK8G,UAAL,CAAgB,KAAK7G,MAArB;AACA,iBAAKmB,GAAL,CAAS7B,SAAT,CAAmB,MAAM,GAAN,GAAY,CAAZ,GAAgB,KAAKuB,OAAxC;AACA,iBAAKM,GAAL,CAAS7B,SAAT,CAAmB,CAAnB;AACA,iBAAK6B,GAAL,CAAS7B,SAAT,CAAmB,CAAnB;AACH,SAND;AAOAQ,mBAAWd,SAAX,CAAqBsD,gBAArB,GAAwC,YAAY;AAChD,iBAAKnB,GAAL,CAAS7B,SAAT,CAAmB,EAAnB;AACA,iBAAK6B,GAAL,CAAS7B,SAAT,CAAmB,GAAnB;AACA,iBAAK6B,GAAL,CAAS7B,SAAT,CAAmB,EAAnB;AACA,iBAAK6B,GAAL,CAAS3B,aAAT,CAAuB,aAAvB;AACA,iBAAK2B,GAAL,CAAS7B,SAAT,CAAmB,CAAnB;AACA,iBAAK6B,GAAL,CAAS7B,SAAT,CAAmB,CAAnB;AACA,iBAAKuH,UAAL,CAAgB,KAAK1G,MAArB;AACA,iBAAKgB,GAAL,CAAS7B,SAAT,CAAmB,CAAnB;AACH,SATD;AAUAQ,mBAAWd,SAAX,CAAqBqD,YAArB,GAAoC,YAAY;AAC5C,iBAAKlB,GAAL,CAASxB,UAAT,CAAoB,KAAKc,QAAzB;AACA,gBAAInD,IAAI,IAAI,GAAJ,GAAU,KAAKmD,QAAL,CAAcrC,MAAhC;AACA,iBAAK,IAAIP,IAAI,CAAb,EAAgBA,IAAIP,CAApB,EAAuBO,GAAvB;AAA2B,qBAAKsD,GAAL,CAAS7B,SAAT,CAAmB,CAAnB;AAA3B;AACH,SAJD;AAKAQ,mBAAWd,SAAX,CAAqB6H,UAArB,GAAkC,UAAUC,MAAV,EAAkB;AAChD,iBAAK3F,GAAL,CAAS7B,SAAT,CAAmBwH,SAAS,GAA5B;AACA,iBAAK3F,GAAL,CAAS7B,SAAT,CAAmBwH,UAAU,CAAV,GAAc,GAAjC;AACH,SAHD;AAIAhH,mBAAWd,SAAX,CAAqByD,WAArB,GAAmC,YAAY;AAC3C,gBAAIsE,MAAM,IAAIxI,UAAJ,CAAe,KAAKwB,KAApB,EAA2B,KAAKC,MAAhC,EAAwC,KAAKO,aAA7C,EAA4D,KAAKC,UAAjE,CAAV;AACAuG,gBAAIC,MAAJ,CAAW,KAAK7F,GAAhB;AACH,SAHD;AAIArB,mBAAWd,SAAX,CAAqBiI,MAArB,GAA8B,YAAY;AACtC,mBAAO,KAAK9F,GAAZ;AACH,SAFD;AAGA9C,eAAOH,OAAP,GAAiB4B,UAAjB;AACH,KAvSE,EAuSA,EAAC,mBAAmB,CAApB,EAAuB,sBAAsB,CAA7C,EAvSA,CADJ,EAwSsD,GAAG,CAAC,UAAUlC,OAAV,EAAmBS,MAAnB,EAA2BH,OAA3B,EAAoC;AACzF,YAAIgJ,MAAM,CAAC,CAAX;AACA,YAAIC,OAAO,EAAX;AACA,YAAIC,QAAQ,IAAZ;AACA,YAAIC,QAAQ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,GAAzB,EAA8B,GAA9B,EAAmC,GAAnC,EAAwC,IAAxC,EAA8C,IAA9C,EAAoD,IAApD,EAA0D,IAA1D,EAAgE,KAAhE,EAAuE,KAAvE,EAA8E,KAA9E,CAAZ;;AAEA,iBAAS9I,UAAT,CAAoBwB,KAApB,EAA2BC,MAA3B,EAAmCM,MAAnC,EAA2CE,UAA3C,EAAuD;AACnD,gBAAI8G,eAAehG,KAAKoE,GAAL,CAAS,CAAT,EAAYlF,UAAZ,CAAnB;AACA,gBAAI+G,QAAQ,IAAItI,UAAJ,CAAe,GAAf,CAAZ;AACA,gBAAIuI,OAAO,IAAIC,UAAJ,CAAeL,KAAf,CAAX;AACA,gBAAIM,UAAU,IAAID,UAAJ,CAAeL,KAAf,CAAd;AACA,gBAAIO,SAAJ;AAAA,gBAAeC,WAAW,CAA1B;AACA,gBAAIC,OAAJ;AACA,gBAAIC,WAAW,CAAf;AACA,gBAAIC,OAAJ;AACA,gBAAIC,YAAY,KAAhB;AACA,gBAAIC,WAAJ,EAAiBC,SAAjB,EAA4BC,OAA5B;;AAEA,qBAASC,QAAT,CAAkBxC,CAAlB,EAAqByC,IAArB,EAA2B;AACvBd,sBAAMM,SAAN,IAAmBjC,CAAnB;AACA,oBAAIiC,WAAW,GAAf,EAAoBS,WAAWD,IAAX;AACvB;;AAED,qBAASE,QAAT,CAAkBF,IAAlB,EAAwB;AACpBG,wBAAQpB,KAAR;AACAU,2BAAWI,YAAY,CAAvB;AACAF,4BAAY,IAAZ;AACAS,uBAAOP,SAAP,EAAkBG,IAAlB;AACH;;AAED,qBAASG,OAAT,CAAiBE,KAAjB,EAAwB;AACpB,qBAAK,IAAI7K,IAAI,CAAb,EAAgBA,IAAI6K,KAApB,EAA2B,EAAE7K,CAA7B;AAA+B2J,yBAAK3J,CAAL,IAAU,CAAC,CAAX;AAA/B;AACH;;AAED,qBAAS8K,QAAT,CAAkBC,SAAlB,EAA6BP,IAA7B,EAAmC;AAC/B,oBAAIQ,KAAJ,EAAWjD,CAAX,EAAc/H,CAAd,EAAiBiL,GAAjB,EAAsBlC,IAAtB,EAA4BmC,SAA5B,EAAuCC,MAAvC;AACAf,8BAAcW,SAAd;AACAZ,4BAAY,KAAZ;AACAiB,yBAAShB,WAAT;AACAF,0BAAUmB,QAAQD,MAAR,CAAV;AACAf,4BAAY,KAAKU,YAAY,CAA7B;AACAT,0BAAUD,YAAY,CAAtB;AACAJ,2BAAWI,YAAY,CAAvB;AACAL,0BAAU,CAAV;AACAiB,sBAAMK,WAAN;AACAH,yBAAS,CAAT;AACA,qBAAKH,QAAQzB,KAAb,EAAoByB,QAAQ,KAA5B,EAAmCA,SAAS,CAA5C;AAA8C,sBAAEG,MAAF;AAA9C,iBACAA,SAAS,IAAIA,MAAb;AACAD,4BAAY3B,KAAZ;AACAoB,wBAAQO,SAAR;AACAN,uBAAOP,SAAP,EAAkBG,IAAlB;AACAe,4BAAW,OAAO,CAACxD,IAAIuD,WAAL,KAAqBjC,GAA5B,EAAiC;AACxC2B,4BAAQ,CAACjD,KAAKuB,IAAN,IAAc2B,GAAtB;AACAjL,wBAAI+H,KAAKoD,MAAL,GAAcF,GAAlB;AACA,wBAAItB,KAAK3J,CAAL,MAAYgL,KAAhB,EAAuB;AACnBC,8BAAMpB,QAAQ7J,CAAR,CAAN;AACA;AACH,qBAHD,MAGO,IAAI2J,KAAK3J,CAAL,KAAW,CAAf,EAAkB;AACrB+I,+BAAOmC,YAAYlL,CAAnB;AACA,4BAAIA,MAAM,CAAV,EAAa+I,OAAO,CAAP;AACb,2BAAG;AACC,gCAAI,CAAC/I,KAAK+I,IAAN,IAAc,CAAlB,EAAqB/I,KAAKkL,SAAL;AACrB,gCAAIvB,KAAK3J,CAAL,MAAYgL,KAAhB,EAAuB;AACnBC,sCAAMpB,QAAQ7J,CAAR,CAAN;AACA,yCAASuL,UAAT;AACH;AACJ,yBAND,QAMS5B,KAAK3J,CAAL,KAAW,CANpB;AAOH;AACD4K,2BAAOK,GAAP,EAAYT,IAAZ;AACAS,0BAAMlD,CAAN;AACA,wBAAIkC,WAAW,KAAKX,IAApB,EAA0B;AACtBO,gCAAQ7J,CAAR,IAAaiK,UAAb;AACAN,6BAAK3J,CAAL,IAAUgL,KAAV;AACH,qBAHD,MAGO;AACHN,iCAASF,IAAT;AACH;AACJ;AACDI,uBAAOK,GAAP,EAAYT,IAAZ;AACAI,uBAAON,OAAP,EAAgBE,IAAhB;AACH;;AAED,qBAASrB,MAAT,CAAgBqB,IAAhB,EAAsB;AAClBA,qBAAK/I,SAAL,CAAegI,YAAf;AACA+B,4BAAYtJ,QAAQC,MAApB;AACAsJ,2BAAW,CAAX;AACAX,yBAASrB,eAAe,CAAxB,EAA2Be,IAA3B;AACAA,qBAAK/I,SAAL,CAAe,CAAf;AACH;;AAED,qBAASgJ,UAAT,CAAoBD,IAApB,EAA0B;AACtB,oBAAIR,UAAU,CAAd,EAAiB;AACbQ,yBAAK/I,SAAL,CAAeuI,OAAf;AACAQ,yBAAK1I,UAAL,CAAgB4H,KAAhB,EAAuB,CAAvB,EAA0BM,OAA1B;AACAA,8BAAU,CAAV;AACH;AACJ;;AAED,qBAASqB,OAAT,CAAiBD,MAAjB,EAAyB;AACrB,uBAAO,CAAC,KAAKA,MAAN,IAAgB,CAAvB;AACH;;AAED,qBAASE,SAAT,GAAqB;AACjB,oBAAIE,cAAc,CAAlB,EAAoB,OAAOnC,GAAP;AACpB,kBAAEmC,SAAF;AACA,oBAAIE,MAAMjJ,OAAOgJ,UAAP,CAAV;AACA,uBAAOC,MAAM,GAAb;AACH;;AAED,qBAASd,MAAT,CAAgBzK,IAAhB,EAAsBqK,IAAtB,EAA4B;AACxBV,6BAAaN,MAAMO,QAAN,CAAb;AACA,oBAAIA,WAAW,CAAf,EAAkBD,aAAa3J,QAAQ4J,QAArB,CAAlB,KAAsDD,YAAY3J,IAAZ;AACtD4J,4BAAYqB,MAAZ;AACA,uBAAOrB,YAAY,CAAnB,EAAsB;AAClBQ,6BAAST,YAAY,GAArB,EAA0BU,IAA1B;AACAV,kCAAc,CAAd;AACAC,gCAAY,CAAZ;AACH;AACD,oBAAIE,WAAWC,OAAX,IAAsBC,SAA1B,EAAqC;AACjC,wBAAIA,SAAJ,EAAe;AACXD,kCAAUmB,QAAQD,SAAShB,WAAjB,CAAV;AACAD,oCAAY,KAAZ;AACH,qBAHD,MAGO;AACH,0BAAEiB,MAAF;AACA,4BAAIA,UAAU9B,IAAd,EAAoBY,UAAU,KAAKZ,IAAf,CAApB,KAA8CY,UAAUmB,QAAQD,MAAR,CAAV;AACjD;AACJ;AACD,oBAAIjL,QAAQmK,OAAZ,EAAqB;AACjB,2BAAOP,WAAW,CAAlB,EAAqB;AACjBQ,iCAAST,YAAY,GAArB,EAA0BU,IAA1B;AACAV,sCAAc,CAAd;AACAC,oCAAY,CAAZ;AACH;AACDU,+BAAWD,IAAX;AACH;AACJ;;AAED,iBAAKrB,MAAL,GAAcA,MAAd;AACH;;AAED3I,eAAOH,OAAP,GAAiBK,UAAjB;AACH,KA5IuD,EA4IrD,EA5IqD,CAxSzD,EAobS,GAAG,CAAC,UAAUX,OAAV,EAAmBS,MAAnB,EAA2BH,OAA3B,EAAoC;AAC5C,YAAIsL,UAAU,GAAd;AACA,YAAIC,UAAU,GAAd;AACA,YAAIC,YAAYD,UAAU,CAA1B;AACA,YAAIE,eAAe,CAAnB;AACA,YAAIC,eAAe,EAAnB;AACA,YAAIC,UAAU,KAAKD,YAAnB;AACA,YAAIE,aAAa,EAAjB;AACA,YAAIC,QAAQ,KAAKD,UAAjB;AACA,YAAIE,YAAY,EAAhB;AACA,YAAIC,OAAOJ,WAAWG,SAAtB;AACA,YAAIE,YAAYL,WAAWC,aAAaE,SAAxC;AACA,YAAIG,UAAUV,WAAW,CAAzB;AACA,YAAIW,kBAAkB,CAAtB;AACA,YAAIC,aAAa,KAAKD,eAAtB;AACA,YAAIE,aAAaH,UAAUE,UAA3B;AACA,YAAIE,YAAY,EAAhB;AACA,YAAIC,iBAAiB,EAArB;AACA,YAAIC,YAAY,KAAKD,cAArB;AACA,YAAIE,QAAJ;AACA,YAAIC,eAAe,CAAnB;AACA,YAAIC,UAAU,KAAKD,YAAnB;AACA,YAAIE,iBAAiBL,iBAAiBG,YAAtC;AACA,YAAIG,eAAe,KAAKD,cAAxB;AACA,YAAIE,SAAS,GAAb;AACA,YAAIC,SAAS,GAAb;AACA,YAAIC,SAAS,GAAb;AACA,YAAIC,SAAS,GAAb;AACA,YAAIC,kBAAkB,IAAID,MAA1B;;AAEA,iBAAS5M,QAAT,CAAkBgC,MAAlB,EAA0B8K,SAA1B,EAAqC;AACjC,gBAAIC,OAAJ;AACA,gBAAIC,QAAJ;AACA,gBAAIC,IAAJ;AACA,gBAAIC,IAAJ;AACA,gBAAIC,QAAJ;;AAEA,qBAASC,IAAT,GAAgB;AACZL,0BAAU,EAAV;AACAC,2BAAW,IAAI7D,UAAJ,CAAe,GAAf,CAAX;AACA8D,uBAAO,IAAI9D,UAAJ,CAAegC,OAAf,CAAP;AACA+B,uBAAO,IAAI/D,UAAJ,CAAegC,OAAf,CAAP;AACAgC,2BAAW,IAAIhE,UAAJ,CAAegC,WAAW,CAA1B,CAAX;AACA,oBAAI5L,CAAJ,EAAO8N,CAAP;AACA,qBAAK9N,IAAI,CAAT,EAAYA,IAAI4L,OAAhB,EAAyB5L,GAAzB,EAA8B;AAC1B8N,wBAAI,CAAC9N,KAAK8L,eAAe,CAArB,IAA0BF,OAA9B;AACA4B,4BAAQxN,CAAR,IAAa,IAAI+N,YAAJ,CAAiB,CAACD,CAAD,EAAIA,CAAJ,EAAOA,CAAP,EAAU,CAAV,CAAjB,CAAb;AACAH,yBAAK3N,CAAL,IAAUgM,UAAUJ,OAApB;AACA8B,yBAAK1N,CAAL,IAAU,CAAV;AACH;AACJ;;AAED,qBAASgO,SAAT,GAAqB;AACjB,qBAAK,IAAIhO,IAAI,CAAb,EAAgBA,IAAI4L,OAApB,EAA6B5L,GAA7B,EAAkC;AAC9BwN,4BAAQxN,CAAR,EAAW,CAAX,MAAkB8L,YAAlB;AACA0B,4BAAQxN,CAAR,EAAW,CAAX,MAAkB8L,YAAlB;AACA0B,4BAAQxN,CAAR,EAAW,CAAX,MAAkB8L,YAAlB;AACA0B,4BAAQxN,CAAR,EAAW,CAAX,IAAgBA,CAAhB;AACH;AACJ;;AAED,qBAASiO,WAAT,CAAqBC,KAArB,EAA4BlO,CAA5B,EAA+BkI,CAA/B,EAAkCD,CAAlC,EAAqCvI,CAArC,EAAwC;AACpC8N,wBAAQxN,CAAR,EAAW,CAAX,KAAiBkO,SAASV,QAAQxN,CAAR,EAAW,CAAX,IAAgBkI,CAAzB,IAA8B0E,SAA/C;AACAY,wBAAQxN,CAAR,EAAW,CAAX,KAAiBkO,SAASV,QAAQxN,CAAR,EAAW,CAAX,IAAgBiI,CAAzB,IAA8B2E,SAA/C;AACAY,wBAAQxN,CAAR,EAAW,CAAX,KAAiBkO,SAASV,QAAQxN,CAAR,EAAW,CAAX,IAAgBN,CAAzB,IAA8BkN,SAA/C;AACH;;AAED,qBAASuB,UAAT,CAAoBC,MAApB,EAA4BpO,CAA5B,EAA+BkI,CAA/B,EAAkCD,CAAlC,EAAqCvI,CAArC,EAAwC;AACpC,oBAAI2O,KAAK5K,KAAK6K,GAAL,CAAStO,IAAIoO,MAAb,CAAT;AACA,oBAAIG,KAAK9K,KAAKqE,GAAL,CAAS9H,IAAIoO,MAAb,EAAqBxC,OAArB,CAAT;AACA,oBAAI7F,IAAI/F,IAAI,CAAZ;AACA,oBAAI8F,IAAI9F,IAAI,CAAZ;AACA,oBAAIwO,IAAI,CAAR;AACA,oBAAIhN,CAAJ,EAAO1B,CAAP;AACA,uBAAOiG,IAAIwI,EAAJ,IAAUzI,IAAIuI,EAArB,EAAyB;AACrBvO,wBAAI8N,SAASY,GAAT,CAAJ;AACA,wBAAIzI,IAAIwI,EAAR,EAAY;AACR/M,4BAAIgM,QAAQzH,GAAR,CAAJ;AACAvE,0BAAE,CAAF,KAAQ1B,KAAK0B,EAAE,CAAF,IAAO0G,CAAZ,IAAiB+E,YAAzB;AACAzL,0BAAE,CAAF,KAAQ1B,KAAK0B,EAAE,CAAF,IAAOyG,CAAZ,IAAiBgF,YAAzB;AACAzL,0BAAE,CAAF,KAAQ1B,KAAK0B,EAAE,CAAF,IAAO9B,CAAZ,IAAiBuN,YAAzB;AACH;AACD,wBAAInH,IAAIuI,EAAR,EAAY;AACR7M,4BAAIgM,QAAQ1H,GAAR,CAAJ;AACAtE,0BAAE,CAAF,KAAQ1B,KAAK0B,EAAE,CAAF,IAAO0G,CAAZ,IAAiB+E,YAAzB;AACAzL,0BAAE,CAAF,KAAQ1B,KAAK0B,EAAE,CAAF,IAAOyG,CAAZ,IAAiBgF,YAAzB;AACAzL,0BAAE,CAAF,KAAQ1B,KAAK0B,EAAE,CAAF,IAAO9B,CAAZ,IAAiBuN,YAAzB;AACH;AACJ;AACJ;;AAED,qBAASwB,OAAT,CAAiBvG,CAAjB,EAAoBD,CAApB,EAAuBvI,CAAvB,EAA0B;AACtB,oBAAIgP,QAAQ,EAAE,KAAK,EAAP,CAAZ;AACA,oBAAIC,YAAYD,KAAhB;AACA,oBAAIE,UAAU,CAAC,CAAf;AACA,oBAAIC,cAAcD,OAAlB;AACA,oBAAI5O,CAAJ,EAAOP,CAAP,EAAUqP,IAAV,EAAgBC,QAAhB,EAA0BC,QAA1B;AACA,qBAAKhP,IAAI,CAAT,EAAYA,IAAI4L,OAAhB,EAAyB5L,GAAzB,EAA8B;AAC1BP,wBAAI+N,QAAQxN,CAAR,CAAJ;AACA8O,2BAAOrL,KAAK6K,GAAL,CAAS7O,EAAE,CAAF,IAAOyI,CAAhB,IAAqBzE,KAAK6K,GAAL,CAAS7O,EAAE,CAAF,IAAOwI,CAAhB,CAArB,GAA0CxE,KAAK6K,GAAL,CAAS7O,EAAE,CAAF,IAAOC,CAAhB,CAAjD;AACA,wBAAIoP,OAAOJ,KAAX,EAAkB;AACdA,gCAAQI,IAAR;AACAF,kCAAU5O,CAAV;AACH;AACD+O,+BAAWD,QAAQpB,KAAK1N,CAAL,KAAW+L,eAAeD,YAAlC,CAAX;AACA,wBAAIiD,WAAWJ,SAAf,EAA0B;AACtBA,oCAAYI,QAAZ;AACAF,sCAAc7O,CAAd;AACH;AACDgP,+BAAWrB,KAAK3N,CAAL,KAAWmM,SAAtB;AACAwB,yBAAK3N,CAAL,KAAWgP,QAAX;AACAtB,yBAAK1N,CAAL,KAAWgP,YAAY/C,UAAvB;AACH;AACD0B,qBAAKiB,OAAL,KAAiBxC,IAAjB;AACAsB,qBAAKkB,OAAL,KAAiBvC,SAAjB;AACA,uBAAOwC,WAAP;AACH;;AAED,qBAASI,QAAT,GAAoB;AAChB,oBAAIjP,CAAJ;AAAA,oBAAO+F,CAAP;AAAA,oBAAUvE,CAAV;AAAA,oBAAa0N,CAAb;AAAA,oBAAgBC,QAAhB;AAAA,oBAA0BC,QAA1B;AAAA,oBAAoCC,cAAc,CAAlD;AAAA,oBAAqDC,WAAW,CAAhE;AACA,qBAAKtP,IAAI,CAAT,EAAYA,IAAI4L,OAAhB,EAAyB5L,GAAzB,EAA8B;AAC1BwB,wBAAIgM,QAAQxN,CAAR,CAAJ;AACAmP,+BAAWnP,CAAX;AACAoP,+BAAW5N,EAAE,CAAF,CAAX;AACA,yBAAKuE,IAAI/F,IAAI,CAAb,EAAgB+F,IAAI6F,OAApB,EAA6B7F,GAA7B,EAAkC;AAC9BmJ,4BAAI1B,QAAQzH,CAAR,CAAJ;AACA,4BAAImJ,EAAE,CAAF,IAAOE,QAAX,EAAqB;AACjBD,uCAAWpJ,CAAX;AACAqJ,uCAAWF,EAAE,CAAF,CAAX;AACH;AACJ;AACDA,wBAAI1B,QAAQ2B,QAAR,CAAJ;AACA,wBAAInP,KAAKmP,QAAT,EAAmB;AACfpJ,4BAAImJ,EAAE,CAAF,CAAJ;AACAA,0BAAE,CAAF,IAAO1N,EAAE,CAAF,CAAP;AACAA,0BAAE,CAAF,IAAOuE,CAAP;AACAA,4BAAImJ,EAAE,CAAF,CAAJ;AACAA,0BAAE,CAAF,IAAO1N,EAAE,CAAF,CAAP;AACAA,0BAAE,CAAF,IAAOuE,CAAP;AACAA,4BAAImJ,EAAE,CAAF,CAAJ;AACAA,0BAAE,CAAF,IAAO1N,EAAE,CAAF,CAAP;AACAA,0BAAE,CAAF,IAAOuE,CAAP;AACAA,4BAAImJ,EAAE,CAAF,CAAJ;AACAA,0BAAE,CAAF,IAAO1N,EAAE,CAAF,CAAP;AACAA,0BAAE,CAAF,IAAOuE,CAAP;AACH;AACD,wBAAIqJ,YAAYC,WAAhB,EAA6B;AACzB5B,iCAAS4B,WAAT,IAAwBC,WAAWtP,CAAX,IAAgB,CAAxC;AACA,6BAAK+F,IAAIsJ,cAAc,CAAvB,EAA0BtJ,IAAIqJ,QAA9B,EAAwCrJ,GAAxC;AAA4C0H,qCAAS1H,CAAT,IAAc/F,CAAd;AAA5C,yBACAqP,cAAcD,QAAd;AACAE,mCAAWtP,CAAX;AACH;AACJ;AACDyN,yBAAS4B,WAAT,IAAwBC,WAAWzD,SAAX,IAAwB,CAAhD;AACA,qBAAK9F,IAAIsJ,cAAc,CAAvB,EAA0BtJ,IAAI,GAA9B,EAAmCA,GAAnC;AAAuC0H,6BAAS1H,CAAT,IAAc8F,SAAd;AAAvC;AACH;;AAED,qBAAS0D,SAAT,CAAmBrH,CAAnB,EAAsBD,CAAtB,EAAyBvI,CAAzB,EAA4B;AACxB,oBAAII,CAAJ,EAAO0B,CAAP,EAAUsN,IAAV;AACA,oBAAIJ,QAAQ,GAAZ;AACA,oBAAIc,OAAO,CAAC,CAAZ;AACA,oBAAIxP,IAAIyN,SAASxF,CAAT,CAAR;AACA,oBAAIlC,IAAI/F,IAAI,CAAZ;AACA,uBAAOA,IAAI4L,OAAJ,IAAe7F,KAAK,CAA3B,EAA8B;AAC1B,wBAAI/F,IAAI4L,OAAR,EAAiB;AACbpK,4BAAIgM,QAAQxN,CAAR,CAAJ;AACA8O,+BAAOtN,EAAE,CAAF,IAAOyG,CAAd;AACA,4BAAI6G,QAAQJ,KAAZ,EAAmB1O,IAAI4L,OAAJ,CAAnB,KAAqC;AACjC5L;AACA,gCAAI8O,OAAO,CAAX,EAAcA,OAAO,CAACA,IAAR;AACdhP,gCAAI0B,EAAE,CAAF,IAAO0G,CAAX;AACA,gCAAIpI,IAAI,CAAR,EAAWA,IAAI,CAACA,CAAL;AACXgP,oCAAQhP,CAAR;AACA,gCAAIgP,OAAOJ,KAAX,EAAkB;AACd5O,oCAAI0B,EAAE,CAAF,IAAO9B,CAAX;AACA,oCAAII,IAAI,CAAR,EAAWA,IAAI,CAACA,CAAL;AACXgP,wCAAQhP,CAAR;AACA,oCAAIgP,OAAOJ,KAAX,EAAkB;AACdA,4CAAQI,IAAR;AACAU,2CAAOhO,EAAE,CAAF,CAAP;AACH;AACJ;AACJ;AACJ;AACD,wBAAIuE,KAAK,CAAT,EAAY;AACRvE,4BAAIgM,QAAQzH,CAAR,CAAJ;AACA+I,+BAAO7G,IAAIzG,EAAE,CAAF,CAAX;AACA,4BAAIsN,QAAQJ,KAAZ,EAAmB3I,IAAI,CAAC,CAAL,CAAnB,KAAgC;AAC5BA;AACA,gCAAI+I,OAAO,CAAX,EAAcA,OAAO,CAACA,IAAR;AACdhP,gCAAI0B,EAAE,CAAF,IAAO0G,CAAX;AACA,gCAAIpI,IAAI,CAAR,EAAWA,IAAI,CAACA,CAAL;AACXgP,oCAAQhP,CAAR;AACA,gCAAIgP,OAAOJ,KAAX,EAAkB;AACd5O,oCAAI0B,EAAE,CAAF,IAAO9B,CAAX;AACA,oCAAII,IAAI,CAAR,EAAWA,IAAI,CAACA,CAAL;AACXgP,wCAAQhP,CAAR;AACA,oCAAIgP,OAAOJ,KAAX,EAAkB;AACdA,4CAAQI,IAAR;AACAU,2CAAOhO,EAAE,CAAF,CAAP;AACH;AACJ;AACJ;AACJ;AACJ;AACD,uBAAOgO,IAAP;AACH;;AAED,qBAASC,KAAT,GAAiB;AACb,oBAAIzP,CAAJ;AACA,oBAAI0P,cAAcjN,OAAOlC,MAAzB;AACA,oBAAIsM,WAAW,KAAK,CAACU,YAAY,CAAb,IAAkB,CAAtC;AACA,oBAAIoC,eAAeD,eAAe,IAAInC,SAAnB,CAAnB;AACA,oBAAIqC,QAAQ,CAAC,EAAED,eAAehE,OAAjB,CAAb;AACA,oBAAIuC,QAAQtB,SAAZ;AACA,oBAAIwB,SAAS3B,UAAb;AACA,oBAAIoD,MAAMzB,UAAU7B,eAApB;AACA,oBAAIsD,OAAO,CAAX,EAAcA,MAAM,CAAN;AACd,qBAAK7P,IAAI,CAAT,EAAYA,IAAI6P,GAAhB,EAAqB7P,GAArB;AAAyB4N,6BAAS5N,CAAT,IAAckO,SAAS,CAAC2B,MAAMA,GAAN,GAAY7P,IAAIA,CAAjB,IAAsB+M,OAAtB,IAAiC8C,MAAMA,GAAvC,CAAT,CAAd;AAAzB,iBACA,IAAIC,IAAJ;AACA,oBAAIJ,cAAcpC,eAAlB,EAAmC;AAC/BC,gCAAY,CAAZ;AACAuC,2BAAO,CAAP;AACH,iBAHD,MAGO,IAAIJ,cAAcxC,MAAd,KAAyB,CAA7B,EAAgC;AACnC4C,2BAAO,IAAI5C,MAAX;AACH,iBAFM,MAEA,IAAIwC,cAAcvC,MAAd,KAAyB,CAA7B,EAAgC;AACnC2C,2BAAO,IAAI3C,MAAX;AACH,iBAFM,MAEA,IAAIuC,cAActC,MAAd,KAAyB,CAA7B,EAAgC;AACnC0C,2BAAO,IAAI1C,MAAX;AACH,iBAFM,MAEA;AACH0C,2BAAO,IAAIzC,MAAX;AACH;AACD,oBAAInF,CAAJ,EAAOD,CAAP,EAAUvI,CAAV,EAAaqG,CAAb;AACA,oBAAI2F,MAAM,CAAV;AACA1L,oBAAI,CAAJ;AACA,uBAAOA,IAAI2P,YAAX,EAAyB;AACrBzH,wBAAI,CAACzF,OAAOiJ,GAAP,IAAc,GAAf,KAAuBI,YAA3B;AACA7D,wBAAI,CAACxF,OAAOiJ,MAAM,CAAb,IAAkB,GAAnB,KAA2BI,YAA/B;AACApM,wBAAI,CAAC+C,OAAOiJ,MAAM,CAAb,IAAkB,GAAnB,KAA2BI,YAA/B;AACA/F,wBAAI0I,QAAQvG,CAAR,EAAWD,CAAX,EAAcvI,CAAd,CAAJ;AACAuO,gCAAYC,KAAZ,EAAmBnI,CAAnB,EAAsBmC,CAAtB,EAAyBD,CAAzB,EAA4BvI,CAA5B;AACA,wBAAImQ,QAAQ,CAAZ,EAAe1B,WAAW0B,GAAX,EAAgB9J,CAAhB,EAAmBmC,CAAnB,EAAsBD,CAAtB,EAAyBvI,CAAzB;AACfgM,2BAAOoE,IAAP;AACA,wBAAIpE,OAAOgE,WAAX,EAAwBhE,OAAOgE,WAAP;AACxB1P;AACA,wBAAI4P,UAAU,CAAd,EAAiBA,QAAQ,CAAR;AACjB,wBAAI5P,IAAI4P,KAAJ,KAAc,CAAlB,EAAqB;AACjB1B,iCAASA,QAAQrB,QAAjB;AACAuB,kCAAUA,SAAS1B,SAAnB;AACAmD,8BAAMzB,UAAU7B,eAAhB;AACA,4BAAIsD,OAAO,CAAX,EAAcA,MAAM,CAAN;AACd,6BAAK9J,IAAI,CAAT,EAAYA,IAAI8J,GAAhB,EAAqB9J,GAArB;AAAyB6H,qCAAS7H,CAAT,IAAcmI,SAAS,CAAC2B,MAAMA,GAAN,GAAY9J,IAAIA,CAAjB,IAAsBgH,OAAtB,IAAiC8C,MAAMA,GAAvC,CAAT,CAAd;AAAzB;AACH;AACJ;AACJ;;AAED,qBAASxK,aAAT,GAAyB;AACrBwI;AACA4B;AACAzB;AACAiB;AACH;;AAED,iBAAK5J,aAAL,GAAqBA,aAArB;AACA,qBAASC,WAAT,GAAuB;AACnB,oBAAIyK,MAAM,EAAV;AACA,oBAAI/J,QAAQ,EAAZ;AACA,qBAAK,IAAIhG,IAAI,CAAb,EAAgBA,IAAI4L,OAApB,EAA6B5L,GAA7B;AAAiCgG,0BAAMwH,QAAQxN,CAAR,EAAW,CAAX,CAAN,IAAuBA,CAAvB;AAAjC,iBACA,IAAI8F,IAAI,CAAR;AACA,qBAAK,IAAI1F,IAAI,CAAb,EAAgBA,IAAIwL,OAApB,EAA6BxL,GAA7B,EAAkC;AAC9B,wBAAI2F,IAAIC,MAAM5F,CAAN,CAAR;AACA2P,wBAAIjK,GAAJ,IAAW0H,QAAQzH,CAAR,EAAW,CAAX,CAAX;AACAgK,wBAAIjK,GAAJ,IAAW0H,QAAQzH,CAAR,EAAW,CAAX,CAAX;AACAgK,wBAAIjK,GAAJ,IAAW0H,QAAQzH,CAAR,EAAW,CAAX,CAAX;AACH;AACD,uBAAOgK,GAAP;AACH;;AAED,iBAAKzK,WAAL,GAAmBA,WAAnB;AACA,iBAAK6C,SAAL,GAAiBoH,SAAjB;AACH;;AAED/O,eAAOH,OAAP,GAAiBI,QAAjB;AACH,KA3RU,EA2RR,EA3RQ,CApbZ,EA+sBS,GAAG,CAAC,UAAUV,OAAV,EAAmBS,MAAnB,EAA2BH,OAA3B,EAAoC;AAC5C,YAAI4B,UAAJ,EAAgB+N,WAAhB;AACA/N,qBAAalC,QAAQ,iBAAR,CAAb;AACAiQ,sBAAc,qBAAUC,KAAV,EAAiB;AAC3B,gBAAIC,OAAJ,EAAatP,IAAb,EAAmBwI,MAAnB,EAA2B+G,QAA3B;AACAD,sBAAU,IAAIjO,UAAJ,CAAegO,MAAM/N,KAArB,EAA4B+N,MAAM9N,MAAlC,CAAV;AACA,gBAAI8N,MAAMjK,KAAN,KAAgB,CAApB,EAAuB;AACnBkK,wBAAQ9K,WAAR;AACH,aAFD,MAEO;AACH8K,wBAAQhN,UAAR,GAAqB,KAArB;AACH;AACDgN,oBAAQlM,cAAR,CAAuBiM,MAAM7N,WAA7B;AACA8N,oBAAQnM,SAAR,CAAkBkM,MAAM3N,MAAxB;AACA4N,oBAAQ3M,QAAR,CAAiB0M,MAAM1N,KAAvB;AACA2N,oBAAQpL,UAAR,CAAmBmL,MAAMlL,OAAzB;AACAmL,oBAAQlL,SAAR,CAAkBiL,MAAM7M,MAAxB;AACA8M,oBAAQjL,gBAAR,CAAyBgL,MAAM5M,aAA/B;AACA6M,oBAAQhM,QAAR,CAAiB+L,MAAMvJ,IAAvB;AACA,gBAAIuJ,MAAMG,IAAV,EAAgB;AACZF,wBAAQrL,MAAR;AACH;AACD,gBAAIoL,MAAM5M,aAAN,KAAwB,IAA5B,EAAkC;AAC9B4M,sBAAM5M,aAAN,GAAsB6M,QAAQ/K,gBAAR,EAAtB;AACH;AACDiE,qBAAS8G,QAAQ9G,MAAR,EAAT;AACA6G,kBAAMvJ,IAAN,GAAa0C,OAAOvI,KAApB;AACAoP,kBAAM5O,MAAN,GAAe+H,OAAO/H,MAAtB;AACA4O,kBAAMlP,QAAN,GAAiBqI,OAAOiH,WAAP,CAAmBtP,QAApC;AACA,gBAAIkP,MAAMK,WAAV,EAAuB;AACnBH,2BAAW,YAAY;AACnB,wBAAInQ,CAAJ,EAAOsI,GAAP,EAAYiI,GAAZ,EAAiBC,OAAjB;AACAD,0BAAMN,MAAMvJ,IAAZ;AACA8J,8BAAU,EAAV;AACA,yBAAKxQ,IAAI,CAAJ,EAAOsI,MAAMiI,IAAIhQ,MAAtB,EAA8BP,IAAIsI,GAAlC,EAAuCtI,GAAvC,EAA4C;AACxCY,+BAAO2P,IAAIvQ,CAAJ,CAAP;AACAwQ,gCAAQC,IAAR,CAAa7P,KAAK8P,MAAlB;AACH;AACD,2BAAOF,OAAP;AACH,iBATU,EAAX;AAUA,uBAAOG,KAAKC,WAAL,CAAiBX,KAAjB,EAAwBE,QAAxB,CAAP;AACH,aAZD,MAYO;AACH,uBAAOQ,KAAKC,WAAL,CAAiBX,KAAjB,CAAP;AACH;AACJ,SAxCD;AAyCAU,aAAKE,SAAL,GAAiB,UAAUC,KAAV,EAAiB;AAC9B,mBAAOd,YAAYc,MAAMpK,IAAlB,CAAP;AACH,SAFD;AAGH,KA/CU,EA+CR,EAAC,mBAAmB,CAApB,EA/CQ;AA/sBZ,CAtBH,EAqxBG,EArxBH,EAqxBO,CAAC,CAAD,CArxBP;AAsxBA","file":"gif.worker.js","sourcesContent":["// gif.worker.js 0.2.0 - https://github.com/jnordberg/gif.js\n(function e(t, n, r) {\n    function s(o, u) {\n        if (!n[o]) {\n            if (!t[o]) {\n                var a = typeof require == \"function\" && require;\n                if (!u && a)return a(o, !0);\n                if (i)return i(o, !0);\n                var f = new Error(\"Cannot find module '\" + o + \"'\");\n                throw f.code = \"MODULE_NOT_FOUND\", f\n            }\n            var l = n[o] = {exports: {}};\n            t[o][0].call(l.exports, function (e) {\n                var n = t[o][1][e];\n                return s(n ? n : e)\n            }, l, l.exports, e, t, n, r)\n        }\n        return n[o].exports\n    }\n\n    var i = typeof require == \"function\" && require;\n    for (var o = 0; o < r.length; o++)s(r[o]);\n    return s\n})({\n    1: [function (require, module, exports) {\n        var NeuQuant = require(\"./TypedNeuQuant.js\");\n        var LZWEncoder = require(\"./LZWEncoder.js\");\n\n        function ByteArray() {\n            this.page = -1;\n            this.pages = [];\n            this.newPage()\n        }\n\n        ByteArray.pageSize = 4096;\n        ByteArray.charMap = {};\n        for (var i = 0; i < 256; i++)ByteArray.charMap[i] = String.fromCharCode(i);\n        ByteArray.prototype.newPage = function () {\n            this.pages[++this.page] = new Uint8Array(ByteArray.pageSize);\n            this.cursor = 0\n        };\n        ByteArray.prototype.getData = function () {\n            var rv = \"\";\n            for (var p = 0; p < this.pages.length; p++) {\n                for (var i = 0; i < ByteArray.pageSize; i++) {\n                    rv += ByteArray.charMap[this.pages[p][i]]\n                }\n            }\n            return rv\n        };\n        ByteArray.prototype.writeByte = function (val) {\n            if (this.cursor >= ByteArray.pageSize) this.newPage();\n            this.pages[this.page][this.cursor++] = val\n        };\n        ByteArray.prototype.writeUTFBytes = function (string) {\n            for (var l = string.length, i = 0; i < l; i++)this.writeByte(string.charCodeAt(i))\n        };\n        ByteArray.prototype.writeBytes = function (array, offset, length) {\n            for (var l = length || array.length, i = offset || 0; i < l; i++)this.writeByte(array[i])\n        };\n        function GIFEncoder(width, height) {\n            this.width = ~~width;\n            this.height = ~~height;\n            this.transparent = null;\n            this.transIndex = 0;\n            this.repeat = -1;\n            this.delay = 0;\n            this.image = null;\n            this.pixels = null;\n            this.indexedPixels = null;\n            this.colorDepth = null;\n            this.colorTab = null;\n            this.neuQuant = null;\n            this.usedEntry = new Array;\n            this.palSize = 7;\n            this.dispose = -1;\n            this.firstFrame = true;\n            this.sample = 10;\n            this.dither = false;\n            this.globalPalette = false;\n            this.out = new ByteArray\n        }\n\n        GIFEncoder.prototype.setDelay = function (milliseconds) {\n            this.delay = Math.round(milliseconds / 10)\n        };\n        GIFEncoder.prototype.setFrameRate = function (fps) {\n            this.delay = Math.round(100 / fps)\n        };\n        GIFEncoder.prototype.setDispose = function (disposalCode) {\n            if (disposalCode >= 0) this.dispose = disposalCode\n        };\n        GIFEncoder.prototype.setRepeat = function (repeat) {\n            this.repeat = repeat\n        };\n        GIFEncoder.prototype.setTransparent = function (color) {\n            this.transparent = color\n        };\n        GIFEncoder.prototype.addFrame = function (imageData) {\n            this.image = imageData;\n            this.colorTab = this.globalPalette && this.globalPalette.slice ? this.globalPalette : null;\n            this.getImagePixels();\n            this.analyzePixels();\n            if (this.globalPalette === true) this.globalPalette = this.colorTab;\n            if (this.firstFrame) {\n                this.writeLSD();\n                this.writePalette();\n                if (this.repeat >= 0) {\n                    this.writeNetscapeExt()\n                }\n            }\n            this.writeGraphicCtrlExt();\n            this.writeImageDesc();\n            if (!this.firstFrame && !this.globalPalette) this.writePalette();\n            this.writePixels();\n            this.firstFrame = false\n        };\n        GIFEncoder.prototype.finish = function () {\n            this.out.writeByte(59)\n        };\n        GIFEncoder.prototype.setQuality = function (quality) {\n            if (quality < 1) quality = 1;\n            this.sample = quality\n        };\n        GIFEncoder.prototype.setDither = function (dither) {\n            if (dither === true) dither = \"FloydSteinberg\";\n            this.dither = dither\n        };\n        GIFEncoder.prototype.setGlobalPalette = function (palette) {\n            this.globalPalette = palette\n        };\n        GIFEncoder.prototype.getGlobalPalette = function () {\n            return this.globalPalette && this.globalPalette.slice && this.globalPalette.slice(0) || this.globalPalette\n        };\n        GIFEncoder.prototype.writeHeader = function () {\n            this.out.writeUTFBytes(\"GIF89a\")\n        };\n        GIFEncoder.prototype.analyzePixels = function () {\n            if (!this.colorTab) {\n                this.neuQuant = new NeuQuant(this.pixels, this.sample);\n                this.neuQuant.buildColormap();\n                this.colorTab = this.neuQuant.getColormap()\n            }\n            if (this.dither) {\n                this.ditherPixels(this.dither.replace(\"-serpentine\", \"\"), this.dither.match(/-serpentine/) !== null)\n            } else {\n                this.indexPixels()\n            }\n            this.pixels = null;\n            this.colorDepth = 8;\n            this.palSize = 7;\n            if (this.transparent !== null) {\n                this.transIndex = this.findClosest(this.transparent, true)\n            }\n        };\n        GIFEncoder.prototype.indexPixels = function (imgq) {\n            var nPix = this.pixels.length / 3;\n            this.indexedPixels = new Uint8Array(nPix);\n            var k = 0;\n            for (var j = 0; j < nPix; j++) {\n                var index = this.findClosestRGB(this.pixels[k++] & 255, this.pixels[k++] & 255, this.pixels[k++] & 255);\n                this.usedEntry[index] = true;\n                this.indexedPixels[j] = index\n            }\n        };\n        GIFEncoder.prototype.ditherPixels = function (kernel, serpentine) {\n            var kernels = {\n                FalseFloydSteinberg: [[3 / 8, 1, 0], [3 / 8, 0, 1], [2 / 8, 1, 1]],\n                FloydSteinberg: [[7 / 16, 1, 0], [3 / 16, -1, 1], [5 / 16, 0, 1], [1 / 16, 1, 1]],\n                Stucki: [[8 / 42, 1, 0], [4 / 42, 2, 0], [2 / 42, -2, 1], [4 / 42, -1, 1], [8 / 42, 0, 1], [4 / 42, 1, 1], [2 / 42, 2, 1], [1 / 42, -2, 2], [2 / 42, -1, 2], [4 / 42, 0, 2], [2 / 42, 1, 2], [1 / 42, 2, 2]],\n                Atkinson: [[1 / 8, 1, 0], [1 / 8, 2, 0], [1 / 8, -1, 1], [1 / 8, 0, 1], [1 / 8, 1, 1], [1 / 8, 0, 2]]\n            };\n            if (!kernel || !kernels[kernel]) {\n                throw\"Unknown dithering kernel: \" + kernel\n            }\n            var ds = kernels[kernel];\n            var index = 0, height = this.height, width = this.width, data = this.pixels;\n            var direction = serpentine ? -1 : 1;\n            this.indexedPixels = new Uint8Array(this.pixels.length / 3);\n            for (var y = 0; y < height; y++) {\n                if (serpentine) direction = direction * -1;\n                for (var x = direction == 1 ? 0 : width - 1, xend = direction == 1 ? width : 0; x !== xend; x += direction) {\n                    index = y * width + x;\n                    var idx = index * 3;\n                    var r1 = data[idx];\n                    var g1 = data[idx + 1];\n                    var b1 = data[idx + 2];\n                    idx = this.findClosestRGB(r1, g1, b1);\n                    this.usedEntry[idx] = true;\n                    this.indexedPixels[index] = idx;\n                    idx *= 3;\n                    var r2 = this.colorTab[idx];\n                    var g2 = this.colorTab[idx + 1];\n                    var b2 = this.colorTab[idx + 2];\n                    var er = r1 - r2;\n                    var eg = g1 - g2;\n                    var eb = b1 - b2;\n                    for (var i = direction == 1 ? 0 : ds.length - 1, end = direction == 1 ? ds.length : 0; i !== end; i += direction) {\n                        var x1 = ds[i][1];\n                        var y1 = ds[i][2];\n                        if (x1 + x >= 0 && x1 + x < width && y1 + y >= 0 && y1 + y < height) {\n                            var d = ds[i][0];\n                            idx = index + x1 + y1 * width;\n                            idx *= 3;\n                            data[idx] = Math.max(0, Math.min(255, data[idx] + er * d));\n                            data[idx + 1] = Math.max(0, Math.min(255, data[idx + 1] + eg * d));\n                            data[idx + 2] = Math.max(0, Math.min(255, data[idx + 2] + eb * d))\n                        }\n                    }\n                }\n            }\n        };\n        GIFEncoder.prototype.findClosest = function (c, used) {\n            return this.findClosestRGB((c & 16711680) >> 16, (c & 65280) >> 8, c & 255, used)\n        };\n        GIFEncoder.prototype.findClosestRGB = function (r, g, b, used) {\n            if (this.colorTab === null)return -1;\n            if (this.neuQuant && !used) {\n                return this.neuQuant.lookupRGB(r, g, b)\n            }\n            var c = b | g << 8 | r << 16;\n            var minpos = 0;\n            var dmin = 256 * 256 * 256;\n            var len = this.colorTab.length;\n            for (var i = 0, index = 0; i < len; index++) {\n                var dr = r - (this.colorTab[i++] & 255);\n                var dg = g - (this.colorTab[i++] & 255);\n                var db = b - (this.colorTab[i++] & 255);\n                var d = dr * dr + dg * dg + db * db;\n                if ((!used || this.usedEntry[index]) && d < dmin) {\n                    dmin = d;\n                    minpos = index\n                }\n            }\n            return minpos\n        };\n        GIFEncoder.prototype.getImagePixels = function () {\n            var w = this.width;\n            var h = this.height;\n            this.pixels = new Uint8Array(w * h * 3);\n            var data = this.image;\n            var srcPos = 0;\n            var count = 0;\n            for (var i = 0; i < h; i++) {\n                for (var j = 0; j < w; j++) {\n                    this.pixels[count++] = data[srcPos++];\n                    this.pixels[count++] = data[srcPos++];\n                    this.pixels[count++] = data[srcPos++];\n                    srcPos++\n                }\n            }\n        };\n        GIFEncoder.prototype.writeGraphicCtrlExt = function () {\n            this.out.writeByte(33);\n            this.out.writeByte(249);\n            this.out.writeByte(4);\n            var transp, disp;\n            if (this.transparent === null) {\n                transp = 0;\n                disp = 0\n            } else {\n                transp = 1;\n                disp = 2\n            }\n            if (this.dispose >= 0) {\n                disp = dispose & 7\n            }\n            disp <<= 2;\n            this.out.writeByte(0 | disp | 0 | transp);\n            this.writeShort(this.delay);\n            this.out.writeByte(this.transIndex);\n            this.out.writeByte(0)\n        };\n        GIFEncoder.prototype.writeImageDesc = function () {\n            this.out.writeByte(44);\n            this.writeShort(0);\n            this.writeShort(0);\n            this.writeShort(this.width);\n            this.writeShort(this.height);\n            if (this.firstFrame || this.globalPalette) {\n                this.out.writeByte(0)\n            } else {\n                this.out.writeByte(128 | 0 | 0 | 0 | this.palSize)\n            }\n        };\n        GIFEncoder.prototype.writeLSD = function () {\n            this.writeShort(this.width);\n            this.writeShort(this.height);\n            this.out.writeByte(128 | 112 | 0 | this.palSize);\n            this.out.writeByte(0);\n            this.out.writeByte(0)\n        };\n        GIFEncoder.prototype.writeNetscapeExt = function () {\n            this.out.writeByte(33);\n            this.out.writeByte(255);\n            this.out.writeByte(11);\n            this.out.writeUTFBytes(\"NETSCAPE2.0\");\n            this.out.writeByte(3);\n            this.out.writeByte(1);\n            this.writeShort(this.repeat);\n            this.out.writeByte(0)\n        };\n        GIFEncoder.prototype.writePalette = function () {\n            this.out.writeBytes(this.colorTab);\n            var n = 3 * 256 - this.colorTab.length;\n            for (var i = 0; i < n; i++)this.out.writeByte(0)\n        };\n        GIFEncoder.prototype.writeShort = function (pValue) {\n            this.out.writeByte(pValue & 255);\n            this.out.writeByte(pValue >> 8 & 255)\n        };\n        GIFEncoder.prototype.writePixels = function () {\n            var enc = new LZWEncoder(this.width, this.height, this.indexedPixels, this.colorDepth);\n            enc.encode(this.out)\n        };\n        GIFEncoder.prototype.stream = function () {\n            return this.out\n        };\n        module.exports = GIFEncoder\n    }, {\"./LZWEncoder.js\": 2, \"./TypedNeuQuant.js\": 3}], 2: [function (require, module, exports) {\n        var EOF = -1;\n        var BITS = 12;\n        var HSIZE = 5003;\n        var masks = [0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767, 65535];\n\n        function LZWEncoder(width, height, pixels, colorDepth) {\n            var initCodeSize = Math.max(2, colorDepth);\n            var accum = new Uint8Array(256);\n            var htab = new Int32Array(HSIZE);\n            var codetab = new Int32Array(HSIZE);\n            var cur_accum, cur_bits = 0;\n            var a_count;\n            var free_ent = 0;\n            var maxcode;\n            var clear_flg = false;\n            var g_init_bits, ClearCode, EOFCode;\n\n            function char_out(c, outs) {\n                accum[a_count++] = c;\n                if (a_count >= 254) flush_char(outs)\n            }\n\n            function cl_block(outs) {\n                cl_hash(HSIZE);\n                free_ent = ClearCode + 2;\n                clear_flg = true;\n                output(ClearCode, outs)\n            }\n\n            function cl_hash(hsize) {\n                for (var i = 0; i < hsize; ++i)htab[i] = -1\n            }\n\n            function compress(init_bits, outs) {\n                var fcode, c, i, ent, disp, hsize_reg, hshift;\n                g_init_bits = init_bits;\n                clear_flg = false;\n                n_bits = g_init_bits;\n                maxcode = MAXCODE(n_bits);\n                ClearCode = 1 << init_bits - 1;\n                EOFCode = ClearCode + 1;\n                free_ent = ClearCode + 2;\n                a_count = 0;\n                ent = nextPixel();\n                hshift = 0;\n                for (fcode = HSIZE; fcode < 65536; fcode *= 2)++hshift;\n                hshift = 8 - hshift;\n                hsize_reg = HSIZE;\n                cl_hash(hsize_reg);\n                output(ClearCode, outs);\n                outer_loop:while ((c = nextPixel()) != EOF) {\n                    fcode = (c << BITS) + ent;\n                    i = c << hshift ^ ent;\n                    if (htab[i] === fcode) {\n                        ent = codetab[i];\n                        continue\n                    } else if (htab[i] >= 0) {\n                        disp = hsize_reg - i;\n                        if (i === 0) disp = 1;\n                        do {\n                            if ((i -= disp) < 0) i += hsize_reg;\n                            if (htab[i] === fcode) {\n                                ent = codetab[i];\n                                continue outer_loop\n                            }\n                        } while (htab[i] >= 0)\n                    }\n                    output(ent, outs);\n                    ent = c;\n                    if (free_ent < 1 << BITS) {\n                        codetab[i] = free_ent++;\n                        htab[i] = fcode\n                    } else {\n                        cl_block(outs)\n                    }\n                }\n                output(ent, outs);\n                output(EOFCode, outs)\n            }\n\n            function encode(outs) {\n                outs.writeByte(initCodeSize);\n                remaining = width * height;\n                curPixel = 0;\n                compress(initCodeSize + 1, outs);\n                outs.writeByte(0)\n            }\n\n            function flush_char(outs) {\n                if (a_count > 0) {\n                    outs.writeByte(a_count);\n                    outs.writeBytes(accum, 0, a_count);\n                    a_count = 0\n                }\n            }\n\n            function MAXCODE(n_bits) {\n                return (1 << n_bits) - 1\n            }\n\n            function nextPixel() {\n                if (remaining === 0)return EOF;\n                --remaining;\n                var pix = pixels[curPixel++];\n                return pix & 255\n            }\n\n            function output(code, outs) {\n                cur_accum &= masks[cur_bits];\n                if (cur_bits > 0) cur_accum |= code << cur_bits; else cur_accum = code;\n                cur_bits += n_bits;\n                while (cur_bits >= 8) {\n                    char_out(cur_accum & 255, outs);\n                    cur_accum >>= 8;\n                    cur_bits -= 8\n                }\n                if (free_ent > maxcode || clear_flg) {\n                    if (clear_flg) {\n                        maxcode = MAXCODE(n_bits = g_init_bits);\n                        clear_flg = false\n                    } else {\n                        ++n_bits;\n                        if (n_bits == BITS) maxcode = 1 << BITS; else maxcode = MAXCODE(n_bits)\n                    }\n                }\n                if (code == EOFCode) {\n                    while (cur_bits > 0) {\n                        char_out(cur_accum & 255, outs);\n                        cur_accum >>= 8;\n                        cur_bits -= 8\n                    }\n                    flush_char(outs)\n                }\n            }\n\n            this.encode = encode\n        }\n\n        module.exports = LZWEncoder\n    }, {}], 3: [function (require, module, exports) {\n        var ncycles = 100;\n        var netsize = 256;\n        var maxnetpos = netsize - 1;\n        var netbiasshift = 4;\n        var intbiasshift = 16;\n        var intbias = 1 << intbiasshift;\n        var gammashift = 10;\n        var gamma = 1 << gammashift;\n        var betashift = 10;\n        var beta = intbias >> betashift;\n        var betagamma = intbias << gammashift - betashift;\n        var initrad = netsize >> 3;\n        var radiusbiasshift = 6;\n        var radiusbias = 1 << radiusbiasshift;\n        var initradius = initrad * radiusbias;\n        var radiusdec = 30;\n        var alphabiasshift = 10;\n        var initalpha = 1 << alphabiasshift;\n        var alphadec;\n        var radbiasshift = 8;\n        var radbias = 1 << radbiasshift;\n        var alpharadbshift = alphabiasshift + radbiasshift;\n        var alpharadbias = 1 << alpharadbshift;\n        var prime1 = 499;\n        var prime2 = 491;\n        var prime3 = 487;\n        var prime4 = 503;\n        var minpicturebytes = 3 * prime4;\n\n        function NeuQuant(pixels, samplefac) {\n            var network;\n            var netindex;\n            var bias;\n            var freq;\n            var radpower;\n\n            function init() {\n                network = [];\n                netindex = new Int32Array(256);\n                bias = new Int32Array(netsize);\n                freq = new Int32Array(netsize);\n                radpower = new Int32Array(netsize >> 3);\n                var i, v;\n                for (i = 0; i < netsize; i++) {\n                    v = (i << netbiasshift + 8) / netsize;\n                    network[i] = new Float64Array([v, v, v, 0]);\n                    freq[i] = intbias / netsize;\n                    bias[i] = 0\n                }\n            }\n\n            function unbiasnet() {\n                for (var i = 0; i < netsize; i++) {\n                    network[i][0] >>= netbiasshift;\n                    network[i][1] >>= netbiasshift;\n                    network[i][2] >>= netbiasshift;\n                    network[i][3] = i\n                }\n            }\n\n            function altersingle(alpha, i, b, g, r) {\n                network[i][0] -= alpha * (network[i][0] - b) / initalpha;\n                network[i][1] -= alpha * (network[i][1] - g) / initalpha;\n                network[i][2] -= alpha * (network[i][2] - r) / initalpha\n            }\n\n            function alterneigh(radius, i, b, g, r) {\n                var lo = Math.abs(i - radius);\n                var hi = Math.min(i + radius, netsize);\n                var j = i + 1;\n                var k = i - 1;\n                var m = 1;\n                var p, a;\n                while (j < hi || k > lo) {\n                    a = radpower[m++];\n                    if (j < hi) {\n                        p = network[j++];\n                        p[0] -= a * (p[0] - b) / alpharadbias;\n                        p[1] -= a * (p[1] - g) / alpharadbias;\n                        p[2] -= a * (p[2] - r) / alpharadbias\n                    }\n                    if (k > lo) {\n                        p = network[k--];\n                        p[0] -= a * (p[0] - b) / alpharadbias;\n                        p[1] -= a * (p[1] - g) / alpharadbias;\n                        p[2] -= a * (p[2] - r) / alpharadbias\n                    }\n                }\n            }\n\n            function contest(b, g, r) {\n                var bestd = ~(1 << 31);\n                var bestbiasd = bestd;\n                var bestpos = -1;\n                var bestbiaspos = bestpos;\n                var i, n, dist, biasdist, betafreq;\n                for (i = 0; i < netsize; i++) {\n                    n = network[i];\n                    dist = Math.abs(n[0] - b) + Math.abs(n[1] - g) + Math.abs(n[2] - r);\n                    if (dist < bestd) {\n                        bestd = dist;\n                        bestpos = i\n                    }\n                    biasdist = dist - (bias[i] >> intbiasshift - netbiasshift);\n                    if (biasdist < bestbiasd) {\n                        bestbiasd = biasdist;\n                        bestbiaspos = i\n                    }\n                    betafreq = freq[i] >> betashift;\n                    freq[i] -= betafreq;\n                    bias[i] += betafreq << gammashift\n                }\n                freq[bestpos] += beta;\n                bias[bestpos] -= betagamma;\n                return bestbiaspos\n            }\n\n            function inxbuild() {\n                var i, j, p, q, smallpos, smallval, previouscol = 0, startpos = 0;\n                for (i = 0; i < netsize; i++) {\n                    p = network[i];\n                    smallpos = i;\n                    smallval = p[1];\n                    for (j = i + 1; j < netsize; j++) {\n                        q = network[j];\n                        if (q[1] < smallval) {\n                            smallpos = j;\n                            smallval = q[1]\n                        }\n                    }\n                    q = network[smallpos];\n                    if (i != smallpos) {\n                        j = q[0];\n                        q[0] = p[0];\n                        p[0] = j;\n                        j = q[1];\n                        q[1] = p[1];\n                        p[1] = j;\n                        j = q[2];\n                        q[2] = p[2];\n                        p[2] = j;\n                        j = q[3];\n                        q[3] = p[3];\n                        p[3] = j\n                    }\n                    if (smallval != previouscol) {\n                        netindex[previouscol] = startpos + i >> 1;\n                        for (j = previouscol + 1; j < smallval; j++)netindex[j] = i;\n                        previouscol = smallval;\n                        startpos = i\n                    }\n                }\n                netindex[previouscol] = startpos + maxnetpos >> 1;\n                for (j = previouscol + 1; j < 256; j++)netindex[j] = maxnetpos\n            }\n\n            function inxsearch(b, g, r) {\n                var a, p, dist;\n                var bestd = 1e3;\n                var best = -1;\n                var i = netindex[g];\n                var j = i - 1;\n                while (i < netsize || j >= 0) {\n                    if (i < netsize) {\n                        p = network[i];\n                        dist = p[1] - g;\n                        if (dist >= bestd) i = netsize; else {\n                            i++;\n                            if (dist < 0) dist = -dist;\n                            a = p[0] - b;\n                            if (a < 0) a = -a;\n                            dist += a;\n                            if (dist < bestd) {\n                                a = p[2] - r;\n                                if (a < 0) a = -a;\n                                dist += a;\n                                if (dist < bestd) {\n                                    bestd = dist;\n                                    best = p[3]\n                                }\n                            }\n                        }\n                    }\n                    if (j >= 0) {\n                        p = network[j];\n                        dist = g - p[1];\n                        if (dist >= bestd) j = -1; else {\n                            j--;\n                            if (dist < 0) dist = -dist;\n                            a = p[0] - b;\n                            if (a < 0) a = -a;\n                            dist += a;\n                            if (dist < bestd) {\n                                a = p[2] - r;\n                                if (a < 0) a = -a;\n                                dist += a;\n                                if (dist < bestd) {\n                                    bestd = dist;\n                                    best = p[3]\n                                }\n                            }\n                        }\n                    }\n                }\n                return best\n            }\n\n            function learn() {\n                var i;\n                var lengthcount = pixels.length;\n                var alphadec = 30 + (samplefac - 1) / 3;\n                var samplepixels = lengthcount / (3 * samplefac);\n                var delta = ~~(samplepixels / ncycles);\n                var alpha = initalpha;\n                var radius = initradius;\n                var rad = radius >> radiusbiasshift;\n                if (rad <= 1) rad = 0;\n                for (i = 0; i < rad; i++)radpower[i] = alpha * ((rad * rad - i * i) * radbias / (rad * rad));\n                var step;\n                if (lengthcount < minpicturebytes) {\n                    samplefac = 1;\n                    step = 3\n                } else if (lengthcount % prime1 !== 0) {\n                    step = 3 * prime1\n                } else if (lengthcount % prime2 !== 0) {\n                    step = 3 * prime2\n                } else if (lengthcount % prime3 !== 0) {\n                    step = 3 * prime3\n                } else {\n                    step = 3 * prime4\n                }\n                var b, g, r, j;\n                var pix = 0;\n                i = 0;\n                while (i < samplepixels) {\n                    b = (pixels[pix] & 255) << netbiasshift;\n                    g = (pixels[pix + 1] & 255) << netbiasshift;\n                    r = (pixels[pix + 2] & 255) << netbiasshift;\n                    j = contest(b, g, r);\n                    altersingle(alpha, j, b, g, r);\n                    if (rad !== 0) alterneigh(rad, j, b, g, r);\n                    pix += step;\n                    if (pix >= lengthcount) pix -= lengthcount;\n                    i++;\n                    if (delta === 0) delta = 1;\n                    if (i % delta === 0) {\n                        alpha -= alpha / alphadec;\n                        radius -= radius / radiusdec;\n                        rad = radius >> radiusbiasshift;\n                        if (rad <= 1) rad = 0;\n                        for (j = 0; j < rad; j++)radpower[j] = alpha * ((rad * rad - j * j) * radbias / (rad * rad))\n                    }\n                }\n            }\n\n            function buildColormap() {\n                init();\n                learn();\n                unbiasnet();\n                inxbuild()\n            }\n\n            this.buildColormap = buildColormap;\n            function getColormap() {\n                var map = [];\n                var index = [];\n                for (var i = 0; i < netsize; i++)index[network[i][3]] = i;\n                var k = 0;\n                for (var l = 0; l < netsize; l++) {\n                    var j = index[l];\n                    map[k++] = network[j][0];\n                    map[k++] = network[j][1];\n                    map[k++] = network[j][2]\n                }\n                return map\n            }\n\n            this.getColormap = getColormap;\n            this.lookupRGB = inxsearch\n        }\n\n        module.exports = NeuQuant\n    }, {}], 4: [function (require, module, exports) {\n        var GIFEncoder, renderFrame;\n        GIFEncoder = require(\"./GIFEncoder.js\");\n        renderFrame = function (frame) {\n            var encoder, page, stream, transfer;\n            encoder = new GIFEncoder(frame.width, frame.height);\n            if (frame.index === 0) {\n                encoder.writeHeader()\n            } else {\n                encoder.firstFrame = false\n            }\n            encoder.setTransparent(frame.transparent);\n            encoder.setRepeat(frame.repeat);\n            encoder.setDelay(frame.delay);\n            encoder.setQuality(frame.quality);\n            encoder.setDither(frame.dither);\n            encoder.setGlobalPalette(frame.globalPalette);\n            encoder.addFrame(frame.data);\n            if (frame.last) {\n                encoder.finish()\n            }\n            if (frame.globalPalette === true) {\n                frame.globalPalette = encoder.getGlobalPalette()\n            }\n            stream = encoder.stream();\n            frame.data = stream.pages;\n            frame.cursor = stream.cursor;\n            frame.pageSize = stream.constructor.pageSize;\n            if (frame.canTransfer) {\n                transfer = function () {\n                    var i, len, ref, results;\n                    ref = frame.data;\n                    results = [];\n                    for (i = 0, len = ref.length; i < len; i++) {\n                        page = ref[i];\n                        results.push(page.buffer)\n                    }\n                    return results\n                }();\n                return self.postMessage(frame, transfer)\n            } else {\n                return self.postMessage(frame)\n            }\n        };\n        self.onmessage = function (event) {\n            return renderFrame(event.data)\n        }\n    }, {\"./GIFEncoder.js\": 1}]\n}, {}, [4]);\n//# sourceMappingURL=gif.worker.js.map"]}